/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr

import (
	"encoding/json"
	"fmt"
)

// CreateRequestRequestSeasons - struct for CreateRequestRequestSeasons
type CreateRequestRequestSeasons struct {
	ArrayOfFloat32 *[]float32
	String *string
}

// []float32AsCreateRequestRequestSeasons is a convenience function that returns []float32 wrapped in CreateRequestRequestSeasons
func ArrayOfFloat32AsCreateRequestRequestSeasons(v *[]float32) CreateRequestRequestSeasons {
	return CreateRequestRequestSeasons{
		ArrayOfFloat32: v,
	}
}

// stringAsCreateRequestRequestSeasons is a convenience function that returns string wrapped in CreateRequestRequestSeasons
func StringAsCreateRequestRequestSeasons(v *string) CreateRequestRequestSeasons {
	return CreateRequestRequestSeasons{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateRequestRequestSeasons) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfFloat32
	err = newStrictDecoder(data).Decode(&dst.ArrayOfFloat32)
	if err == nil {
		jsonArrayOfFloat32, _ := json.Marshal(dst.ArrayOfFloat32)
		if string(jsonArrayOfFloat32) == "{}" { // empty struct
			dst.ArrayOfFloat32 = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfFloat32 = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfFloat32 = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateRequestRequestSeasons)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateRequestRequestSeasons)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateRequestRequestSeasons) MarshalJSON() ([]byte, error) {
	if src.ArrayOfFloat32 != nil {
		return json.Marshal(&src.ArrayOfFloat32)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateRequestRequestSeasons) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfFloat32 != nil {
		return obj.ArrayOfFloat32
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableCreateRequestRequestSeasons struct {
	value *CreateRequestRequestSeasons
	isSet bool
}

func (v NullableCreateRequestRequestSeasons) Get() *CreateRequestRequestSeasons {
	return v.value
}

func (v *NullableCreateRequestRequestSeasons) Set(val *CreateRequestRequestSeasons) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRequestRequestSeasons) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRequestRequestSeasons) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRequestRequestSeasons(val *CreateRequestRequestSeasons) *NullableCreateRequestRequestSeasons {
	return &NullableCreateRequestRequestSeasons{value: val, isSet: true}
}

func (v NullableCreateRequestRequestSeasons) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRequestRequestSeasons) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


