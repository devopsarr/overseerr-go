/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: v1.33.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr

import (
	"encoding/json"
	"fmt"
)

// UpdateRequestRequest struct for UpdateRequestRequest
type UpdateRequestRequest struct {
	MediaType string `json:"mediaType"`
	Seasons []*float32 `json:"seasons,omitempty"`
	Is4k *bool `json:"is4k,omitempty"`
	ServerId *float32 `json:"serverId,omitempty"`
	ProfileId *float32 `json:"profileId,omitempty"`
	RootFolder *string `json:"rootFolder,omitempty"`
	LanguageProfileId *float32 `json:"languageProfileId,omitempty"`
	UserId NullableFloat32 `json:"userId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateRequestRequest UpdateRequestRequest

// NewUpdateRequestRequest instantiates a new UpdateRequestRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateRequestRequest(mediaType string) *UpdateRequestRequest {
	this := UpdateRequestRequest{}
	this.MediaType = mediaType
	return &this
}

// NewUpdateRequestRequestWithDefaults instantiates a new UpdateRequestRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateRequestRequestWithDefaults() *UpdateRequestRequest {
	this := UpdateRequestRequest{}
	return &this
}

// GetMediaType returns the MediaType field value
func (o *UpdateRequestRequest) GetMediaType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MediaType
}

// GetMediaTypeOk returns a tuple with the MediaType field value
// and a boolean to check if the value has been set.
func (o *UpdateRequestRequest) GetMediaTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.MediaType, true
}

// SetMediaType sets field value
func (o *UpdateRequestRequest) SetMediaType(v string) {
	o.MediaType = v
}

// GetSeasons returns the Seasons field value if set, zero value otherwise.
func (o *UpdateRequestRequest) GetSeasons() []*float32 {
	if o == nil || isNil(o.Seasons) {
		var ret []*float32
		return ret
	}
	return o.Seasons
}

// GetSeasonsOk returns a tuple with the Seasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRequestRequest) GetSeasonsOk() ([]*float32, bool) {
	if o == nil || isNil(o.Seasons) {
    return nil, false
	}
	return o.Seasons, true
}

// HasSeasons returns a boolean if a field has been set.
func (o *UpdateRequestRequest) HasSeasons() bool {
	if o != nil && !isNil(o.Seasons) {
		return true
	}

	return false
}

// SetSeasons gets a reference to the given []float32 and assigns it to the Seasons field.
func (o *UpdateRequestRequest) SetSeasons(v []*float32) {
	o.Seasons = v
}

// GetIs4k returns the Is4k field value if set, zero value otherwise.
func (o *UpdateRequestRequest) GetIs4k() bool {
	if o == nil || isNil(o.Is4k) {
		var ret bool
		return ret
	}
	return *o.Is4k
}

// GetIs4kOk returns a tuple with the Is4k field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRequestRequest) GetIs4kOk() (*bool, bool) {
	if o == nil || isNil(o.Is4k) {
    return nil, false
	}
	return o.Is4k, true
}

// HasIs4k returns a boolean if a field has been set.
func (o *UpdateRequestRequest) HasIs4k() bool {
	if o != nil && !isNil(o.Is4k) {
		return true
	}

	return false
}

// SetIs4k gets a reference to the given bool and assigns it to the Is4k field.
func (o *UpdateRequestRequest) SetIs4k(v bool) {
	o.Is4k = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *UpdateRequestRequest) GetServerId() float32 {
	if o == nil || isNil(o.ServerId) {
		var ret float32
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRequestRequest) GetServerIdOk() (*float32, bool) {
	if o == nil || isNil(o.ServerId) {
    return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *UpdateRequestRequest) HasServerId() bool {
	if o != nil && !isNil(o.ServerId) {
		return true
	}

	return false
}

// SetServerId gets a reference to the given float32 and assigns it to the ServerId field.
func (o *UpdateRequestRequest) SetServerId(v float32) {
	o.ServerId = &v
}

// GetProfileId returns the ProfileId field value if set, zero value otherwise.
func (o *UpdateRequestRequest) GetProfileId() float32 {
	if o == nil || isNil(o.ProfileId) {
		var ret float32
		return ret
	}
	return *o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRequestRequest) GetProfileIdOk() (*float32, bool) {
	if o == nil || isNil(o.ProfileId) {
    return nil, false
	}
	return o.ProfileId, true
}

// HasProfileId returns a boolean if a field has been set.
func (o *UpdateRequestRequest) HasProfileId() bool {
	if o != nil && !isNil(o.ProfileId) {
		return true
	}

	return false
}

// SetProfileId gets a reference to the given float32 and assigns it to the ProfileId field.
func (o *UpdateRequestRequest) SetProfileId(v float32) {
	o.ProfileId = &v
}

// GetRootFolder returns the RootFolder field value if set, zero value otherwise.
func (o *UpdateRequestRequest) GetRootFolder() string {
	if o == nil || isNil(o.RootFolder) {
		var ret string
		return ret
	}
	return *o.RootFolder
}

// GetRootFolderOk returns a tuple with the RootFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRequestRequest) GetRootFolderOk() (*string, bool) {
	if o == nil || isNil(o.RootFolder) {
    return nil, false
	}
	return o.RootFolder, true
}

// HasRootFolder returns a boolean if a field has been set.
func (o *UpdateRequestRequest) HasRootFolder() bool {
	if o != nil && !isNil(o.RootFolder) {
		return true
	}

	return false
}

// SetRootFolder gets a reference to the given string and assigns it to the RootFolder field.
func (o *UpdateRequestRequest) SetRootFolder(v string) {
	o.RootFolder = &v
}

// GetLanguageProfileId returns the LanguageProfileId field value if set, zero value otherwise.
func (o *UpdateRequestRequest) GetLanguageProfileId() float32 {
	if o == nil || isNil(o.LanguageProfileId) {
		var ret float32
		return ret
	}
	return *o.LanguageProfileId
}

// GetLanguageProfileIdOk returns a tuple with the LanguageProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRequestRequest) GetLanguageProfileIdOk() (*float32, bool) {
	if o == nil || isNil(o.LanguageProfileId) {
    return nil, false
	}
	return o.LanguageProfileId, true
}

// HasLanguageProfileId returns a boolean if a field has been set.
func (o *UpdateRequestRequest) HasLanguageProfileId() bool {
	if o != nil && !isNil(o.LanguageProfileId) {
		return true
	}

	return false
}

// SetLanguageProfileId gets a reference to the given float32 and assigns it to the LanguageProfileId field.
func (o *UpdateRequestRequest) SetLanguageProfileId(v float32) {
	o.LanguageProfileId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateRequestRequest) GetUserId() float32 {
	if o == nil || isNil(o.UserId.Get()) {
		var ret float32
		return ret
	}
	return *o.UserId.Get()
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateRequestRequest) GetUserIdOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.UserId.Get(), o.UserId.IsSet()
}

// HasUserId returns a boolean if a field has been set.
func (o *UpdateRequestRequest) HasUserId() bool {
	if o != nil && o.UserId.IsSet() {
		return true
	}

	return false
}

// SetUserId gets a reference to the given NullableFloat32 and assigns it to the UserId field.
func (o *UpdateRequestRequest) SetUserId(v float32) {
	o.UserId.Set(&v)
}
// SetUserIdNil sets the value for UserId to be an explicit nil
func (o *UpdateRequestRequest) SetUserIdNil() {
	o.UserId.Set(nil)
}

// UnsetUserId ensures that no value is present for UserId, not even an explicit nil
func (o *UpdateRequestRequest) UnsetUserId() {
	o.UserId.Unset()
}

func (o UpdateRequestRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["mediaType"] = o.MediaType
	}
	if !isNil(o.Seasons) {
		toSerialize["seasons"] = o.Seasons
	}
	if !isNil(o.Is4k) {
		toSerialize["is4k"] = o.Is4k
	}
	if !isNil(o.ServerId) {
		toSerialize["serverId"] = o.ServerId
	}
	if !isNil(o.ProfileId) {
		toSerialize["profileId"] = o.ProfileId
	}
	if !isNil(o.RootFolder) {
		toSerialize["rootFolder"] = o.RootFolder
	}
	if !isNil(o.LanguageProfileId) {
		toSerialize["languageProfileId"] = o.LanguageProfileId
	}
	if o.UserId.IsSet() {
		toSerialize["userId"] = o.UserId.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *UpdateRequestRequest) UnmarshalJSON(bytes []byte) (err error) {
	varUpdateRequestRequest := _UpdateRequestRequest{}

	if err = json.Unmarshal(bytes, &varUpdateRequestRequest); err == nil {
		*o = UpdateRequestRequest(varUpdateRequestRequest)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "mediaType")
		delete(additionalProperties, "seasons")
		delete(additionalProperties, "is4k")
		delete(additionalProperties, "serverId")
		delete(additionalProperties, "profileId")
		delete(additionalProperties, "rootFolder")
		delete(additionalProperties, "languageProfileId")
		delete(additionalProperties, "userId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateRequestRequest struct {
	value *UpdateRequestRequest
	isSet bool
}

func (v NullableUpdateRequestRequest) Get() *UpdateRequestRequest {
	return v.value
}

func (v *NullableUpdateRequestRequest) Set(val *UpdateRequestRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRequestRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRequestRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRequestRequest(val *UpdateRequestRequest) *NullableUpdateRequestRequest {
	return &NullableUpdateRequestRequest{value: val, isSet: true}
}

func (v NullableUpdateRequestRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRequestRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


