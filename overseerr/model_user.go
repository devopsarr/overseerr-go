/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: v1.33.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr

import (
	"encoding/json"
	"fmt"
)

// checks if the User type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &User{}

// User struct for User
type User struct {
	Id int32 `json:"id"`
	Email string `json:"email"`
	Username *string `json:"username,omitempty"`
	PlexToken *string `json:"plexToken,omitempty"`
	PlexUsername *string `json:"plexUsername,omitempty"`
	UserType *int32 `json:"userType,omitempty"`
	Permissions *float32 `json:"permissions,omitempty"`
	Avatar *string `json:"avatar,omitempty"`
	CreatedAt string `json:"createdAt"`
	UpdatedAt string `json:"updatedAt"`
	RequestCount *float32 `json:"requestCount,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _User User

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser(id int32, email string, createdAt string, updatedAt string) *User {
	this := User{}
	this.Id = id
	this.Email = email
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetId returns the Id field value
func (o *User) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *User) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *User) SetId(v int32) {
	o.Id = v
}

// GetEmail returns the Email field value
func (o *User) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *User) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *User) SetEmail(v string) {
	o.Email = v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *User) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *User) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *User) SetUsername(v string) {
	o.Username = &v
}

// GetPlexToken returns the PlexToken field value if set, zero value otherwise.
func (o *User) GetPlexToken() string {
	if o == nil || IsNil(o.PlexToken) {
		var ret string
		return ret
	}
	return *o.PlexToken
}

// GetPlexTokenOk returns a tuple with the PlexToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPlexTokenOk() (*string, bool) {
	if o == nil || IsNil(o.PlexToken) {
		return nil, false
	}
	return o.PlexToken, true
}

// HasPlexToken returns a boolean if a field has been set.
func (o *User) HasPlexToken() bool {
	if o != nil && !IsNil(o.PlexToken) {
		return true
	}

	return false
}

// SetPlexToken gets a reference to the given string and assigns it to the PlexToken field.
func (o *User) SetPlexToken(v string) {
	o.PlexToken = &v
}

// GetPlexUsername returns the PlexUsername field value if set, zero value otherwise.
func (o *User) GetPlexUsername() string {
	if o == nil || IsNil(o.PlexUsername) {
		var ret string
		return ret
	}
	return *o.PlexUsername
}

// GetPlexUsernameOk returns a tuple with the PlexUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPlexUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.PlexUsername) {
		return nil, false
	}
	return o.PlexUsername, true
}

// HasPlexUsername returns a boolean if a field has been set.
func (o *User) HasPlexUsername() bool {
	if o != nil && !IsNil(o.PlexUsername) {
		return true
	}

	return false
}

// SetPlexUsername gets a reference to the given string and assigns it to the PlexUsername field.
func (o *User) SetPlexUsername(v string) {
	o.PlexUsername = &v
}

// GetUserType returns the UserType field value if set, zero value otherwise.
func (o *User) GetUserType() int32 {
	if o == nil || IsNil(o.UserType) {
		var ret int32
		return ret
	}
	return *o.UserType
}

// GetUserTypeOk returns a tuple with the UserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetUserTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.UserType) {
		return nil, false
	}
	return o.UserType, true
}

// HasUserType returns a boolean if a field has been set.
func (o *User) HasUserType() bool {
	if o != nil && !IsNil(o.UserType) {
		return true
	}

	return false
}

// SetUserType gets a reference to the given int32 and assigns it to the UserType field.
func (o *User) SetUserType(v int32) {
	o.UserType = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *User) GetPermissions() float32 {
	if o == nil || IsNil(o.Permissions) {
		var ret float32
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPermissionsOk() (*float32, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *User) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given float32 and assigns it to the Permissions field.
func (o *User) SetPermissions(v float32) {
	o.Permissions = &v
}

// GetAvatar returns the Avatar field value if set, zero value otherwise.
func (o *User) GetAvatar() string {
	if o == nil || IsNil(o.Avatar) {
		var ret string
		return ret
	}
	return *o.Avatar
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetAvatarOk() (*string, bool) {
	if o == nil || IsNil(o.Avatar) {
		return nil, false
	}
	return o.Avatar, true
}

// HasAvatar returns a boolean if a field has been set.
func (o *User) HasAvatar() bool {
	if o != nil && !IsNil(o.Avatar) {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given string and assigns it to the Avatar field.
func (o *User) SetAvatar(v string) {
	o.Avatar = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *User) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *User) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *User) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *User) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *User) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *User) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetRequestCount returns the RequestCount field value if set, zero value otherwise.
func (o *User) GetRequestCount() float32 {
	if o == nil || IsNil(o.RequestCount) {
		var ret float32
		return ret
	}
	return *o.RequestCount
}

// GetRequestCountOk returns a tuple with the RequestCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetRequestCountOk() (*float32, bool) {
	if o == nil || IsNil(o.RequestCount) {
		return nil, false
	}
	return o.RequestCount, true
}

// HasRequestCount returns a boolean if a field has been set.
func (o *User) HasRequestCount() bool {
	if o != nil && !IsNil(o.RequestCount) {
		return true
	}

	return false
}

// SetRequestCount gets a reference to the given float32 and assigns it to the RequestCount field.
func (o *User) SetRequestCount(v float32) {
	o.RequestCount = &v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o User) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["email"] = o.Email
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.PlexToken) {
		toSerialize["plexToken"] = o.PlexToken
	}
	if !IsNil(o.PlexUsername) {
		toSerialize["plexUsername"] = o.PlexUsername
	}
	if !IsNil(o.UserType) {
		toSerialize["userType"] = o.UserType
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.Avatar) {
		toSerialize["avatar"] = o.Avatar
	}
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["updatedAt"] = o.UpdatedAt
	if !IsNil(o.RequestCount) {
		toSerialize["requestCount"] = o.RequestCount
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *User) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"email",
		"createdAt",
		"updatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUser := _User{}

	err = json.Unmarshal(data, &varUser)

	if err != nil {
		return err
	}

	*o = User(varUser)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "email")
		delete(additionalProperties, "username")
		delete(additionalProperties, "plexToken")
		delete(additionalProperties, "plexUsername")
		delete(additionalProperties, "userType")
		delete(additionalProperties, "permissions")
		delete(additionalProperties, "avatar")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "requestCount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


