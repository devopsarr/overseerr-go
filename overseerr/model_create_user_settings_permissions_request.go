/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: v1.33.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateUserSettingsPermissionsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateUserSettingsPermissionsRequest{}

// CreateUserSettingsPermissionsRequest struct for CreateUserSettingsPermissionsRequest
type CreateUserSettingsPermissionsRequest struct {
	Permissions float32 `json:"permissions"`
	AdditionalProperties map[string]interface{}
}

type _CreateUserSettingsPermissionsRequest CreateUserSettingsPermissionsRequest

// NewCreateUserSettingsPermissionsRequest instantiates a new CreateUserSettingsPermissionsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUserSettingsPermissionsRequest(permissions float32) *CreateUserSettingsPermissionsRequest {
	this := CreateUserSettingsPermissionsRequest{}
	this.Permissions = permissions
	return &this
}

// NewCreateUserSettingsPermissionsRequestWithDefaults instantiates a new CreateUserSettingsPermissionsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUserSettingsPermissionsRequestWithDefaults() *CreateUserSettingsPermissionsRequest {
	this := CreateUserSettingsPermissionsRequest{}
	return &this
}

// GetPermissions returns the Permissions field value
func (o *CreateUserSettingsPermissionsRequest) GetPermissions() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *CreateUserSettingsPermissionsRequest) GetPermissionsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Permissions, true
}

// SetPermissions sets field value
func (o *CreateUserSettingsPermissionsRequest) SetPermissions(v float32) {
	o.Permissions = v
}

func (o CreateUserSettingsPermissionsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateUserSettingsPermissionsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["permissions"] = o.Permissions

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateUserSettingsPermissionsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"permissions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateUserSettingsPermissionsRequest := _CreateUserSettingsPermissionsRequest{}

	err = json.Unmarshal(data, &varCreateUserSettingsPermissionsRequest)

	if err != nil {
		return err
	}

	*o = CreateUserSettingsPermissionsRequest(varCreateUserSettingsPermissionsRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "permissions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateUserSettingsPermissionsRequest struct {
	value *CreateUserSettingsPermissionsRequest
	isSet bool
}

func (v NullableCreateUserSettingsPermissionsRequest) Get() *CreateUserSettingsPermissionsRequest {
	return v.value
}

func (v *NullableCreateUserSettingsPermissionsRequest) Set(val *CreateUserSettingsPermissionsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUserSettingsPermissionsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUserSettingsPermissionsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUserSettingsPermissionsRequest(val *CreateUserSettingsPermissionsRequest) *NullableCreateUserSettingsPermissionsRequest {
	return &NullableCreateUserSettingsPermissionsRequest{value: val, isSet: true}
}

func (v NullableCreateUserSettingsPermissionsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUserSettingsPermissionsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


