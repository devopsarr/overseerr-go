/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: v1.33.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// PersonResultKnownForInner - struct for PersonResultKnownForInner
type PersonResultKnownForInner struct {
	MovieResult *MovieResult
	TvResult *TvResult
}

// MovieResultAsPersonResultKnownForInner is a convenience function that returns MovieResult wrapped in PersonResultKnownForInner
func MovieResultAsPersonResultKnownForInner(v *MovieResult) PersonResultKnownForInner {
	return PersonResultKnownForInner{
		MovieResult: v,
	}
}

// TvResultAsPersonResultKnownForInner is a convenience function that returns TvResult wrapped in PersonResultKnownForInner
func TvResultAsPersonResultKnownForInner(v *TvResult) PersonResultKnownForInner {
	return PersonResultKnownForInner{
		TvResult: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PersonResultKnownForInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MovieResult
	err = newStrictDecoder(data).Decode(&dst.MovieResult)
	if err == nil {
		jsonMovieResult, _ := json.Marshal(dst.MovieResult)
		if string(jsonMovieResult) == "{}" { // empty struct
			dst.MovieResult = nil
		} else {
			if err = validator.Validate(dst.MovieResult); err != nil {
				dst.MovieResult = nil
			} else {
				match++
			}
		}
	} else {
		dst.MovieResult = nil
	}

	// try to unmarshal data into TvResult
	err = newStrictDecoder(data).Decode(&dst.TvResult)
	if err == nil {
		jsonTvResult, _ := json.Marshal(dst.TvResult)
		if string(jsonTvResult) == "{}" { // empty struct
			dst.TvResult = nil
		} else {
			if err = validator.Validate(dst.TvResult); err != nil {
				dst.TvResult = nil
			} else {
				match++
			}
		}
	} else {
		dst.TvResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MovieResult = nil
		dst.TvResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PersonResultKnownForInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PersonResultKnownForInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PersonResultKnownForInner) MarshalJSON() ([]byte, error) {
	if src.MovieResult != nil {
		return json.Marshal(&src.MovieResult)
	}

	if src.TvResult != nil {
		return json.Marshal(&src.TvResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PersonResultKnownForInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MovieResult != nil {
		return obj.MovieResult
	}

	if obj.TvResult != nil {
		return obj.TvResult
	}

	// all schemas are nil
	return nil
}

type NullablePersonResultKnownForInner struct {
	value *PersonResultKnownForInner
	isSet bool
}

func (v NullablePersonResultKnownForInner) Get() *PersonResultKnownForInner {
	return v.value
}

func (v *NullablePersonResultKnownForInner) Set(val *PersonResultKnownForInner) {
	v.value = val
	v.isSet = true
}

func (v NullablePersonResultKnownForInner) IsSet() bool {
	return v.isSet
}

func (v *NullablePersonResultKnownForInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersonResultKnownForInner(val *PersonResultKnownForInner) *NullablePersonResultKnownForInner {
	return &NullablePersonResultKnownForInner{value: val, isSet: true}
}

func (v NullablePersonResultKnownForInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersonResultKnownForInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


