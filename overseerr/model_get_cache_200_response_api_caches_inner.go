/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr

import (
	"encoding/json"
)

// GetCache200ResponseApiCachesInner struct for GetCache200ResponseApiCachesInner
type GetCache200ResponseApiCachesInner struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Stats *GetCache200ResponseApiCachesInnerStats `json:"stats,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetCache200ResponseApiCachesInner GetCache200ResponseApiCachesInner

// NewGetCache200ResponseApiCachesInner instantiates a new GetCache200ResponseApiCachesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetCache200ResponseApiCachesInner() *GetCache200ResponseApiCachesInner {
	this := GetCache200ResponseApiCachesInner{}
	return &this
}

// NewGetCache200ResponseApiCachesInnerWithDefaults instantiates a new GetCache200ResponseApiCachesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetCache200ResponseApiCachesInnerWithDefaults() *GetCache200ResponseApiCachesInner {
	this := GetCache200ResponseApiCachesInner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetCache200ResponseApiCachesInner) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCache200ResponseApiCachesInner) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetCache200ResponseApiCachesInner) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GetCache200ResponseApiCachesInner) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GetCache200ResponseApiCachesInner) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCache200ResponseApiCachesInner) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GetCache200ResponseApiCachesInner) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GetCache200ResponseApiCachesInner) SetName(v string) {
	o.Name = &v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *GetCache200ResponseApiCachesInner) GetStats() GetCache200ResponseApiCachesInnerStats {
	if o == nil || isNil(o.Stats) {
		var ret GetCache200ResponseApiCachesInnerStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCache200ResponseApiCachesInner) GetStatsOk() (*GetCache200ResponseApiCachesInnerStats, bool) {
	if o == nil || isNil(o.Stats) {
    return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *GetCache200ResponseApiCachesInner) HasStats() bool {
	if o != nil && !isNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given GetCache200ResponseApiCachesInnerStats and assigns it to the Stats field.
func (o *GetCache200ResponseApiCachesInner) SetStats(v GetCache200ResponseApiCachesInnerStats) {
	o.Stats = &v
}

func (o GetCache200ResponseApiCachesInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Stats) {
		toSerialize["stats"] = o.Stats
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *GetCache200ResponseApiCachesInner) UnmarshalJSON(bytes []byte) (err error) {
	varGetCache200ResponseApiCachesInner := _GetCache200ResponseApiCachesInner{}

	if err = json.Unmarshal(bytes, &varGetCache200ResponseApiCachesInner); err == nil {
		*o = GetCache200ResponseApiCachesInner(varGetCache200ResponseApiCachesInner)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "stats")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetCache200ResponseApiCachesInner struct {
	value *GetCache200ResponseApiCachesInner
	isSet bool
}

func (v NullableGetCache200ResponseApiCachesInner) Get() *GetCache200ResponseApiCachesInner {
	return v.value
}

func (v *NullableGetCache200ResponseApiCachesInner) Set(val *GetCache200ResponseApiCachesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCache200ResponseApiCachesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCache200ResponseApiCachesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCache200ResponseApiCachesInner(val *GetCache200ResponseApiCachesInner) *NullableGetCache200ResponseApiCachesInner {
	return &NullableGetCache200ResponseApiCachesInner{value: val, isSet: true}
}

func (v NullableGetCache200ResponseApiCachesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCache200ResponseApiCachesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


