/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: v1.33.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr

import (
	"encoding/json"
)

// Collection struct for Collection
type Collection struct {
	Id *float32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Overview *string `json:"overview,omitempty"`
	PosterPath *string `json:"posterPath,omitempty"`
	BackdropPath *string `json:"backdropPath,omitempty"`
	Parts []*MovieResult `json:"parts,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Collection Collection

// NewCollection instantiates a new Collection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCollection() *Collection {
	this := Collection{}
	return &this
}

// NewCollectionWithDefaults instantiates a new Collection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCollectionWithDefaults() *Collection {
	this := Collection{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Collection) GetId() float32 {
	if o == nil || isNil(o.Id) {
		var ret float32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetIdOk() (*float32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Collection) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *Collection) SetId(v float32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Collection) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Collection) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Collection) SetName(v string) {
	o.Name = &v
}

// GetOverview returns the Overview field value if set, zero value otherwise.
func (o *Collection) GetOverview() string {
	if o == nil || isNil(o.Overview) {
		var ret string
		return ret
	}
	return *o.Overview
}

// GetOverviewOk returns a tuple with the Overview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetOverviewOk() (*string, bool) {
	if o == nil || isNil(o.Overview) {
    return nil, false
	}
	return o.Overview, true
}

// HasOverview returns a boolean if a field has been set.
func (o *Collection) HasOverview() bool {
	if o != nil && !isNil(o.Overview) {
		return true
	}

	return false
}

// SetOverview gets a reference to the given string and assigns it to the Overview field.
func (o *Collection) SetOverview(v string) {
	o.Overview = &v
}

// GetPosterPath returns the PosterPath field value if set, zero value otherwise.
func (o *Collection) GetPosterPath() string {
	if o == nil || isNil(o.PosterPath) {
		var ret string
		return ret
	}
	return *o.PosterPath
}

// GetPosterPathOk returns a tuple with the PosterPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetPosterPathOk() (*string, bool) {
	if o == nil || isNil(o.PosterPath) {
    return nil, false
	}
	return o.PosterPath, true
}

// HasPosterPath returns a boolean if a field has been set.
func (o *Collection) HasPosterPath() bool {
	if o != nil && !isNil(o.PosterPath) {
		return true
	}

	return false
}

// SetPosterPath gets a reference to the given string and assigns it to the PosterPath field.
func (o *Collection) SetPosterPath(v string) {
	o.PosterPath = &v
}

// GetBackdropPath returns the BackdropPath field value if set, zero value otherwise.
func (o *Collection) GetBackdropPath() string {
	if o == nil || isNil(o.BackdropPath) {
		var ret string
		return ret
	}
	return *o.BackdropPath
}

// GetBackdropPathOk returns a tuple with the BackdropPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetBackdropPathOk() (*string, bool) {
	if o == nil || isNil(o.BackdropPath) {
    return nil, false
	}
	return o.BackdropPath, true
}

// HasBackdropPath returns a boolean if a field has been set.
func (o *Collection) HasBackdropPath() bool {
	if o != nil && !isNil(o.BackdropPath) {
		return true
	}

	return false
}

// SetBackdropPath gets a reference to the given string and assigns it to the BackdropPath field.
func (o *Collection) SetBackdropPath(v string) {
	o.BackdropPath = &v
}

// GetParts returns the Parts field value if set, zero value otherwise.
func (o *Collection) GetParts() []*MovieResult {
	if o == nil || isNil(o.Parts) {
		var ret []*MovieResult
		return ret
	}
	return o.Parts
}

// GetPartsOk returns a tuple with the Parts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetPartsOk() ([]*MovieResult, bool) {
	if o == nil || isNil(o.Parts) {
    return nil, false
	}
	return o.Parts, true
}

// HasParts returns a boolean if a field has been set.
func (o *Collection) HasParts() bool {
	if o != nil && !isNil(o.Parts) {
		return true
	}

	return false
}

// SetParts gets a reference to the given []MovieResult and assigns it to the Parts field.
func (o *Collection) SetParts(v []*MovieResult) {
	o.Parts = v
}

func (o Collection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Overview) {
		toSerialize["overview"] = o.Overview
	}
	if !isNil(o.PosterPath) {
		toSerialize["posterPath"] = o.PosterPath
	}
	if !isNil(o.BackdropPath) {
		toSerialize["backdropPath"] = o.BackdropPath
	}
	if !isNil(o.Parts) {
		toSerialize["parts"] = o.Parts
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Collection) UnmarshalJSON(bytes []byte) (err error) {
	varCollection := _Collection{}

	if err = json.Unmarshal(bytes, &varCollection); err == nil {
		*o = Collection(varCollection)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "overview")
		delete(additionalProperties, "posterPath")
		delete(additionalProperties, "backdropPath")
		delete(additionalProperties, "parts")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCollection struct {
	value *Collection
	isSet bool
}

func (v NullableCollection) Get() *Collection {
	return v.value
}

func (v *NullableCollection) Set(val *Collection) {
	v.value = val
	v.isSet = true
}

func (v NullableCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollection(val *Collection) *NullableCollection {
	return &NullableCollection{value: val, isSet: true}
}

func (v NullableCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


