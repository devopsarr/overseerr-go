/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: v1.34.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr

import (
	"encoding/json"
	"fmt"
)


// GetSearch2XXResponseResultsInner struct for GetSearch2XXResponseResultsInner
type GetSearch2XXResponseResultsInner struct {
	MovieResult *MovieResult
	PersonResult *PersonResult
	TvResult *TvResult
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *GetSearch2XXResponseResultsInner) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into MovieResult
	err = json.Unmarshal(data, &dst.MovieResult);
	if err == nil {
		jsonMovieResult, _ := json.Marshal(dst.MovieResult)
		if string(jsonMovieResult) == "{}" { // empty struct
			dst.MovieResult = nil
		} else {
			return nil // data stored in dst.MovieResult, return on the first match
		}
	} else {
		dst.MovieResult = nil
	}

	// try to unmarshal JSON data into PersonResult
	err = json.Unmarshal(data, &dst.PersonResult);
	if err == nil {
		jsonPersonResult, _ := json.Marshal(dst.PersonResult)
		if string(jsonPersonResult) == "{}" { // empty struct
			dst.PersonResult = nil
		} else {
			return nil // data stored in dst.PersonResult, return on the first match
		}
	} else {
		dst.PersonResult = nil
	}

	// try to unmarshal JSON data into TvResult
	err = json.Unmarshal(data, &dst.TvResult);
	if err == nil {
		jsonTvResult, _ := json.Marshal(dst.TvResult)
		if string(jsonTvResult) == "{}" { // empty struct
			dst.TvResult = nil
		} else {
			return nil // data stored in dst.TvResult, return on the first match
		}
	} else {
		dst.TvResult = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(GetSearch2XXResponseResultsInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetSearch2XXResponseResultsInner) MarshalJSON() ([]byte, error) {
	if src.MovieResult != nil {
		return json.Marshal(&src.MovieResult)
	}

	if src.PersonResult != nil {
		return json.Marshal(&src.PersonResult)
	}

	if src.TvResult != nil {
		return json.Marshal(&src.TvResult)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableGetSearch2XXResponseResultsInner struct {
	value *GetSearch2XXResponseResultsInner
	isSet bool
}

func (v NullableGetSearch2XXResponseResultsInner) Get() *GetSearch2XXResponseResultsInner {
	return v.value
}

func (v *NullableGetSearch2XXResponseResultsInner) Set(val *GetSearch2XXResponseResultsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSearch2XXResponseResultsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSearch2XXResponseResultsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSearch2XXResponseResultsInner(val *GetSearch2XXResponseResultsInner) *NullableGetSearch2XXResponseResultsInner {
	return &NullableGetSearch2XXResponseResultsInner{value: val, isSet: true}
}

func (v NullableGetSearch2XXResponseResultsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSearch2XXResponseResultsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


