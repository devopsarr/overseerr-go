/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: v1.33.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr

import (
	"encoding/json"
)

// GetMediaWatchData2XXResponse struct for GetMediaWatchData2XXResponse
type GetMediaWatchData2XXResponse struct {
	Data *GetMediaWatchData2XXResponseData `json:"data,omitempty"`
	Data4k *GetMediaWatchData2XXResponseData `json:"data4k,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetMediaWatchData2XXResponse GetMediaWatchData2XXResponse

// NewGetMediaWatchData2XXResponse instantiates a new GetMediaWatchData2XXResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetMediaWatchData2XXResponse() *GetMediaWatchData2XXResponse {
	this := GetMediaWatchData2XXResponse{}
	return &this
}

// NewGetMediaWatchData2XXResponseWithDefaults instantiates a new GetMediaWatchData2XXResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetMediaWatchData2XXResponseWithDefaults() *GetMediaWatchData2XXResponse {
	this := GetMediaWatchData2XXResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *GetMediaWatchData2XXResponse) GetData() GetMediaWatchData2XXResponseData {
	if o == nil || isNil(o.Data) {
		var ret GetMediaWatchData2XXResponseData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetMediaWatchData2XXResponse) GetDataOk() (*GetMediaWatchData2XXResponseData, bool) {
	if o == nil || isNil(o.Data) {
    return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *GetMediaWatchData2XXResponse) HasData() bool {
	if o != nil && !isNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given GetMediaWatchData2XXResponseData and assigns it to the Data field.
func (o *GetMediaWatchData2XXResponse) SetData(v GetMediaWatchData2XXResponseData) {
	o.Data = &v
}

// GetData4k returns the Data4k field value if set, zero value otherwise.
func (o *GetMediaWatchData2XXResponse) GetData4k() GetMediaWatchData2XXResponseData {
	if o == nil || isNil(o.Data4k) {
		var ret GetMediaWatchData2XXResponseData
		return ret
	}
	return *o.Data4k
}

// GetData4kOk returns a tuple with the Data4k field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetMediaWatchData2XXResponse) GetData4kOk() (*GetMediaWatchData2XXResponseData, bool) {
	if o == nil || isNil(o.Data4k) {
    return nil, false
	}
	return o.Data4k, true
}

// HasData4k returns a boolean if a field has been set.
func (o *GetMediaWatchData2XXResponse) HasData4k() bool {
	if o != nil && !isNil(o.Data4k) {
		return true
	}

	return false
}

// SetData4k gets a reference to the given GetMediaWatchData2XXResponseData and assigns it to the Data4k field.
func (o *GetMediaWatchData2XXResponse) SetData4k(v GetMediaWatchData2XXResponseData) {
	o.Data4k = &v
}

func (o GetMediaWatchData2XXResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !isNil(o.Data4k) {
		toSerialize["data4k"] = o.Data4k
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *GetMediaWatchData2XXResponse) UnmarshalJSON(bytes []byte) (err error) {
	varGetMediaWatchData2XXResponse := _GetMediaWatchData2XXResponse{}

	if err = json.Unmarshal(bytes, &varGetMediaWatchData2XXResponse); err == nil {
		*o = GetMediaWatchData2XXResponse(varGetMediaWatchData2XXResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		delete(additionalProperties, "data4k")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetMediaWatchData2XXResponse struct {
	value *GetMediaWatchData2XXResponse
	isSet bool
}

func (v NullableGetMediaWatchData2XXResponse) Get() *GetMediaWatchData2XXResponse {
	return v.value
}

func (v *NullableGetMediaWatchData2XXResponse) Set(val *GetMediaWatchData2XXResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMediaWatchData2XXResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMediaWatchData2XXResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMediaWatchData2XXResponse(val *GetMediaWatchData2XXResponse) *NullableGetMediaWatchData2XXResponse {
	return &NullableGetMediaWatchData2XXResponse{value: val, isSet: true}
}

func (v NullableGetMediaWatchData2XXResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMediaWatchData2XXResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


