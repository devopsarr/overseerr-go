/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: v1.34.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr

import (
	"encoding/json"
)

// checks if the PersonDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PersonDetails{}

// PersonDetails struct for PersonDetails
type PersonDetails struct {
	Id *float32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Deathday *string `json:"deathday,omitempty"`
	KnownForDepartment *string `json:"knownForDepartment,omitempty"`
	AlsoKnownAs []string `json:"alsoKnownAs,omitempty"`
	Gender *string `json:"gender,omitempty"`
	Biography *string `json:"biography,omitempty"`
	Popularity *string `json:"popularity,omitempty"`
	PlaceOfBirth *string `json:"placeOfBirth,omitempty"`
	ProfilePath *string `json:"profilePath,omitempty"`
	Adult *bool `json:"adult,omitempty"`
	ImdbId *string `json:"imdbId,omitempty"`
	Homepage *string `json:"homepage,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PersonDetails PersonDetails

// NewPersonDetails instantiates a new PersonDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPersonDetails() *PersonDetails {
	this := PersonDetails{}
	return &this
}

// NewPersonDetailsWithDefaults instantiates a new PersonDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersonDetailsWithDefaults() *PersonDetails {
	this := PersonDetails{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PersonDetails) GetId() float32 {
	if o == nil || IsNil(o.Id) {
		var ret float32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonDetails) GetIdOk() (*float32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PersonDetails) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *PersonDetails) SetId(v float32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PersonDetails) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonDetails) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PersonDetails) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PersonDetails) SetName(v string) {
	o.Name = &v
}

// GetDeathday returns the Deathday field value if set, zero value otherwise.
func (o *PersonDetails) GetDeathday() string {
	if o == nil || IsNil(o.Deathday) {
		var ret string
		return ret
	}
	return *o.Deathday
}

// GetDeathdayOk returns a tuple with the Deathday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonDetails) GetDeathdayOk() (*string, bool) {
	if o == nil || IsNil(o.Deathday) {
		return nil, false
	}
	return o.Deathday, true
}

// HasDeathday returns a boolean if a field has been set.
func (o *PersonDetails) HasDeathday() bool {
	if o != nil && !IsNil(o.Deathday) {
		return true
	}

	return false
}

// SetDeathday gets a reference to the given string and assigns it to the Deathday field.
func (o *PersonDetails) SetDeathday(v string) {
	o.Deathday = &v
}

// GetKnownForDepartment returns the KnownForDepartment field value if set, zero value otherwise.
func (o *PersonDetails) GetKnownForDepartment() string {
	if o == nil || IsNil(o.KnownForDepartment) {
		var ret string
		return ret
	}
	return *o.KnownForDepartment
}

// GetKnownForDepartmentOk returns a tuple with the KnownForDepartment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonDetails) GetKnownForDepartmentOk() (*string, bool) {
	if o == nil || IsNil(o.KnownForDepartment) {
		return nil, false
	}
	return o.KnownForDepartment, true
}

// HasKnownForDepartment returns a boolean if a field has been set.
func (o *PersonDetails) HasKnownForDepartment() bool {
	if o != nil && !IsNil(o.KnownForDepartment) {
		return true
	}

	return false
}

// SetKnownForDepartment gets a reference to the given string and assigns it to the KnownForDepartment field.
func (o *PersonDetails) SetKnownForDepartment(v string) {
	o.KnownForDepartment = &v
}

// GetAlsoKnownAs returns the AlsoKnownAs field value if set, zero value otherwise.
func (o *PersonDetails) GetAlsoKnownAs() []string {
	if o == nil || IsNil(o.AlsoKnownAs) {
		var ret []string
		return ret
	}
	return o.AlsoKnownAs
}

// GetAlsoKnownAsOk returns a tuple with the AlsoKnownAs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonDetails) GetAlsoKnownAsOk() ([]string, bool) {
	if o == nil || IsNil(o.AlsoKnownAs) {
		return nil, false
	}
	return o.AlsoKnownAs, true
}

// HasAlsoKnownAs returns a boolean if a field has been set.
func (o *PersonDetails) HasAlsoKnownAs() bool {
	if o != nil && !IsNil(o.AlsoKnownAs) {
		return true
	}

	return false
}

// SetAlsoKnownAs gets a reference to the given []string and assigns it to the AlsoKnownAs field.
func (o *PersonDetails) SetAlsoKnownAs(v []string) {
	o.AlsoKnownAs = v
}

// GetGender returns the Gender field value if set, zero value otherwise.
func (o *PersonDetails) GetGender() string {
	if o == nil || IsNil(o.Gender) {
		var ret string
		return ret
	}
	return *o.Gender
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonDetails) GetGenderOk() (*string, bool) {
	if o == nil || IsNil(o.Gender) {
		return nil, false
	}
	return o.Gender, true
}

// HasGender returns a boolean if a field has been set.
func (o *PersonDetails) HasGender() bool {
	if o != nil && !IsNil(o.Gender) {
		return true
	}

	return false
}

// SetGender gets a reference to the given string and assigns it to the Gender field.
func (o *PersonDetails) SetGender(v string) {
	o.Gender = &v
}

// GetBiography returns the Biography field value if set, zero value otherwise.
func (o *PersonDetails) GetBiography() string {
	if o == nil || IsNil(o.Biography) {
		var ret string
		return ret
	}
	return *o.Biography
}

// GetBiographyOk returns a tuple with the Biography field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonDetails) GetBiographyOk() (*string, bool) {
	if o == nil || IsNil(o.Biography) {
		return nil, false
	}
	return o.Biography, true
}

// HasBiography returns a boolean if a field has been set.
func (o *PersonDetails) HasBiography() bool {
	if o != nil && !IsNil(o.Biography) {
		return true
	}

	return false
}

// SetBiography gets a reference to the given string and assigns it to the Biography field.
func (o *PersonDetails) SetBiography(v string) {
	o.Biography = &v
}

// GetPopularity returns the Popularity field value if set, zero value otherwise.
func (o *PersonDetails) GetPopularity() string {
	if o == nil || IsNil(o.Popularity) {
		var ret string
		return ret
	}
	return *o.Popularity
}

// GetPopularityOk returns a tuple with the Popularity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonDetails) GetPopularityOk() (*string, bool) {
	if o == nil || IsNil(o.Popularity) {
		return nil, false
	}
	return o.Popularity, true
}

// HasPopularity returns a boolean if a field has been set.
func (o *PersonDetails) HasPopularity() bool {
	if o != nil && !IsNil(o.Popularity) {
		return true
	}

	return false
}

// SetPopularity gets a reference to the given string and assigns it to the Popularity field.
func (o *PersonDetails) SetPopularity(v string) {
	o.Popularity = &v
}

// GetPlaceOfBirth returns the PlaceOfBirth field value if set, zero value otherwise.
func (o *PersonDetails) GetPlaceOfBirth() string {
	if o == nil || IsNil(o.PlaceOfBirth) {
		var ret string
		return ret
	}
	return *o.PlaceOfBirth
}

// GetPlaceOfBirthOk returns a tuple with the PlaceOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonDetails) GetPlaceOfBirthOk() (*string, bool) {
	if o == nil || IsNil(o.PlaceOfBirth) {
		return nil, false
	}
	return o.PlaceOfBirth, true
}

// HasPlaceOfBirth returns a boolean if a field has been set.
func (o *PersonDetails) HasPlaceOfBirth() bool {
	if o != nil && !IsNil(o.PlaceOfBirth) {
		return true
	}

	return false
}

// SetPlaceOfBirth gets a reference to the given string and assigns it to the PlaceOfBirth field.
func (o *PersonDetails) SetPlaceOfBirth(v string) {
	o.PlaceOfBirth = &v
}

// GetProfilePath returns the ProfilePath field value if set, zero value otherwise.
func (o *PersonDetails) GetProfilePath() string {
	if o == nil || IsNil(o.ProfilePath) {
		var ret string
		return ret
	}
	return *o.ProfilePath
}

// GetProfilePathOk returns a tuple with the ProfilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonDetails) GetProfilePathOk() (*string, bool) {
	if o == nil || IsNil(o.ProfilePath) {
		return nil, false
	}
	return o.ProfilePath, true
}

// HasProfilePath returns a boolean if a field has been set.
func (o *PersonDetails) HasProfilePath() bool {
	if o != nil && !IsNil(o.ProfilePath) {
		return true
	}

	return false
}

// SetProfilePath gets a reference to the given string and assigns it to the ProfilePath field.
func (o *PersonDetails) SetProfilePath(v string) {
	o.ProfilePath = &v
}

// GetAdult returns the Adult field value if set, zero value otherwise.
func (o *PersonDetails) GetAdult() bool {
	if o == nil || IsNil(o.Adult) {
		var ret bool
		return ret
	}
	return *o.Adult
}

// GetAdultOk returns a tuple with the Adult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonDetails) GetAdultOk() (*bool, bool) {
	if o == nil || IsNil(o.Adult) {
		return nil, false
	}
	return o.Adult, true
}

// HasAdult returns a boolean if a field has been set.
func (o *PersonDetails) HasAdult() bool {
	if o != nil && !IsNil(o.Adult) {
		return true
	}

	return false
}

// SetAdult gets a reference to the given bool and assigns it to the Adult field.
func (o *PersonDetails) SetAdult(v bool) {
	o.Adult = &v
}

// GetImdbId returns the ImdbId field value if set, zero value otherwise.
func (o *PersonDetails) GetImdbId() string {
	if o == nil || IsNil(o.ImdbId) {
		var ret string
		return ret
	}
	return *o.ImdbId
}

// GetImdbIdOk returns a tuple with the ImdbId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonDetails) GetImdbIdOk() (*string, bool) {
	if o == nil || IsNil(o.ImdbId) {
		return nil, false
	}
	return o.ImdbId, true
}

// HasImdbId returns a boolean if a field has been set.
func (o *PersonDetails) HasImdbId() bool {
	if o != nil && !IsNil(o.ImdbId) {
		return true
	}

	return false
}

// SetImdbId gets a reference to the given string and assigns it to the ImdbId field.
func (o *PersonDetails) SetImdbId(v string) {
	o.ImdbId = &v
}

// GetHomepage returns the Homepage field value if set, zero value otherwise.
func (o *PersonDetails) GetHomepage() string {
	if o == nil || IsNil(o.Homepage) {
		var ret string
		return ret
	}
	return *o.Homepage
}

// GetHomepageOk returns a tuple with the Homepage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonDetails) GetHomepageOk() (*string, bool) {
	if o == nil || IsNil(o.Homepage) {
		return nil, false
	}
	return o.Homepage, true
}

// HasHomepage returns a boolean if a field has been set.
func (o *PersonDetails) HasHomepage() bool {
	if o != nil && !IsNil(o.Homepage) {
		return true
	}

	return false
}

// SetHomepage gets a reference to the given string and assigns it to the Homepage field.
func (o *PersonDetails) SetHomepage(v string) {
	o.Homepage = &v
}

func (o PersonDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PersonDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Deathday) {
		toSerialize["deathday"] = o.Deathday
	}
	if !IsNil(o.KnownForDepartment) {
		toSerialize["knownForDepartment"] = o.KnownForDepartment
	}
	if !IsNil(o.AlsoKnownAs) {
		toSerialize["alsoKnownAs"] = o.AlsoKnownAs
	}
	if !IsNil(o.Gender) {
		toSerialize["gender"] = o.Gender
	}
	if !IsNil(o.Biography) {
		toSerialize["biography"] = o.Biography
	}
	if !IsNil(o.Popularity) {
		toSerialize["popularity"] = o.Popularity
	}
	if !IsNil(o.PlaceOfBirth) {
		toSerialize["placeOfBirth"] = o.PlaceOfBirth
	}
	if !IsNil(o.ProfilePath) {
		toSerialize["profilePath"] = o.ProfilePath
	}
	if !IsNil(o.Adult) {
		toSerialize["adult"] = o.Adult
	}
	if !IsNil(o.ImdbId) {
		toSerialize["imdbId"] = o.ImdbId
	}
	if !IsNil(o.Homepage) {
		toSerialize["homepage"] = o.Homepage
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PersonDetails) UnmarshalJSON(data []byte) (err error) {
	varPersonDetails := _PersonDetails{}

	err = json.Unmarshal(data, &varPersonDetails)

	if err != nil {
		return err
	}

	*o = PersonDetails(varPersonDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "deathday")
		delete(additionalProperties, "knownForDepartment")
		delete(additionalProperties, "alsoKnownAs")
		delete(additionalProperties, "gender")
		delete(additionalProperties, "biography")
		delete(additionalProperties, "popularity")
		delete(additionalProperties, "placeOfBirth")
		delete(additionalProperties, "profilePath")
		delete(additionalProperties, "adult")
		delete(additionalProperties, "imdbId")
		delete(additionalProperties, "homepage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePersonDetails struct {
	value *PersonDetails
	isSet bool
}

func (v NullablePersonDetails) Get() *PersonDetails {
	return v.value
}

func (v *NullablePersonDetails) Set(val *PersonDetails) {
	v.value = val
	v.isSet = true
}

func (v NullablePersonDetails) IsSet() bool {
	return v.isSet
}

func (v *NullablePersonDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersonDetails(val *PersonDetails) *NullablePersonDetails {
	return &NullablePersonDetails{value: val, isSet: true}
}

func (v NullablePersonDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersonDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


