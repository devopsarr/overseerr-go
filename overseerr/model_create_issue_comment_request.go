/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr

import (
	"encoding/json"
)

// CreateIssueCommentRequest struct for CreateIssueCommentRequest
type CreateIssueCommentRequest struct {
	Message string `json:"message"`
	AdditionalProperties map[string]interface{}
}

type _CreateIssueCommentRequest CreateIssueCommentRequest

// NewCreateIssueCommentRequest instantiates a new CreateIssueCommentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateIssueCommentRequest(message string) *CreateIssueCommentRequest {
	this := CreateIssueCommentRequest{}
	this.Message = message
	return &this
}

// NewCreateIssueCommentRequestWithDefaults instantiates a new CreateIssueCommentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateIssueCommentRequestWithDefaults() *CreateIssueCommentRequest {
	this := CreateIssueCommentRequest{}
	return &this
}

// GetMessage returns the Message field value
func (o *CreateIssueCommentRequest) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *CreateIssueCommentRequest) GetMessageOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *CreateIssueCommentRequest) SetMessage(v string) {
	o.Message = v
}

func (o CreateIssueCommentRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["message"] = o.Message
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CreateIssueCommentRequest) UnmarshalJSON(bytes []byte) (err error) {
	varCreateIssueCommentRequest := _CreateIssueCommentRequest{}

	if err = json.Unmarshal(bytes, &varCreateIssueCommentRequest); err == nil {
		*o = CreateIssueCommentRequest(varCreateIssueCommentRequest)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "message")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateIssueCommentRequest struct {
	value *CreateIssueCommentRequest
	isSet bool
}

func (v NullableCreateIssueCommentRequest) Get() *CreateIssueCommentRequest {
	return v.value
}

func (v *NullableCreateIssueCommentRequest) Set(val *CreateIssueCommentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateIssueCommentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateIssueCommentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateIssueCommentRequest(val *CreateIssueCommentRequest) *NullableCreateIssueCommentRequest {
	return &NullableCreateIssueCommentRequest{value: val, isSet: true}
}

func (v NullableCreateIssueCommentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateIssueCommentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


