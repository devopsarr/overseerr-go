/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: v1.34.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr

import (
	"encoding/json"
	"fmt"
)

// checks if the MovieResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MovieResult{}

// MovieResult struct for MovieResult
type MovieResult struct {
	Id float32 `json:"id"`
	MediaType string `json:"mediaType"`
	Popularity *float32 `json:"popularity,omitempty"`
	PosterPath *string `json:"posterPath,omitempty"`
	BackdropPath *string `json:"backdropPath,omitempty"`
	VoteCount *float32 `json:"voteCount,omitempty"`
	VoteAverage *float32 `json:"voteAverage,omitempty"`
	GenreIds []float32 `json:"genreIds,omitempty"`
	Overview *string `json:"overview,omitempty"`
	OriginalLanguage *string `json:"originalLanguage,omitempty"`
	Title string `json:"title"`
	OriginalTitle *string `json:"originalTitle,omitempty"`
	ReleaseDate *string `json:"releaseDate,omitempty"`
	Adult *bool `json:"adult,omitempty"`
	Video *bool `json:"video,omitempty"`
	MediaInfo *MediaInfo `json:"mediaInfo,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MovieResult MovieResult

// NewMovieResult instantiates a new MovieResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMovieResult(id float32, mediaType string, title string) *MovieResult {
	this := MovieResult{}
	this.Id = id
	this.MediaType = mediaType
	this.Title = title
	return &this
}

// NewMovieResultWithDefaults instantiates a new MovieResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMovieResultWithDefaults() *MovieResult {
	this := MovieResult{}
	return &this
}

// GetId returns the Id field value
func (o *MovieResult) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MovieResult) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MovieResult) SetId(v float32) {
	o.Id = v
}

// GetMediaType returns the MediaType field value
func (o *MovieResult) GetMediaType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MediaType
}

// GetMediaTypeOk returns a tuple with the MediaType field value
// and a boolean to check if the value has been set.
func (o *MovieResult) GetMediaTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MediaType, true
}

// SetMediaType sets field value
func (o *MovieResult) SetMediaType(v string) {
	o.MediaType = v
}

// GetPopularity returns the Popularity field value if set, zero value otherwise.
func (o *MovieResult) GetPopularity() float32 {
	if o == nil || IsNil(o.Popularity) {
		var ret float32
		return ret
	}
	return *o.Popularity
}

// GetPopularityOk returns a tuple with the Popularity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResult) GetPopularityOk() (*float32, bool) {
	if o == nil || IsNil(o.Popularity) {
		return nil, false
	}
	return o.Popularity, true
}

// HasPopularity returns a boolean if a field has been set.
func (o *MovieResult) HasPopularity() bool {
	if o != nil && !IsNil(o.Popularity) {
		return true
	}

	return false
}

// SetPopularity gets a reference to the given float32 and assigns it to the Popularity field.
func (o *MovieResult) SetPopularity(v float32) {
	o.Popularity = &v
}

// GetPosterPath returns the PosterPath field value if set, zero value otherwise.
func (o *MovieResult) GetPosterPath() string {
	if o == nil || IsNil(o.PosterPath) {
		var ret string
		return ret
	}
	return *o.PosterPath
}

// GetPosterPathOk returns a tuple with the PosterPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResult) GetPosterPathOk() (*string, bool) {
	if o == nil || IsNil(o.PosterPath) {
		return nil, false
	}
	return o.PosterPath, true
}

// HasPosterPath returns a boolean if a field has been set.
func (o *MovieResult) HasPosterPath() bool {
	if o != nil && !IsNil(o.PosterPath) {
		return true
	}

	return false
}

// SetPosterPath gets a reference to the given string and assigns it to the PosterPath field.
func (o *MovieResult) SetPosterPath(v string) {
	o.PosterPath = &v
}

// GetBackdropPath returns the BackdropPath field value if set, zero value otherwise.
func (o *MovieResult) GetBackdropPath() string {
	if o == nil || IsNil(o.BackdropPath) {
		var ret string
		return ret
	}
	return *o.BackdropPath
}

// GetBackdropPathOk returns a tuple with the BackdropPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResult) GetBackdropPathOk() (*string, bool) {
	if o == nil || IsNil(o.BackdropPath) {
		return nil, false
	}
	return o.BackdropPath, true
}

// HasBackdropPath returns a boolean if a field has been set.
func (o *MovieResult) HasBackdropPath() bool {
	if o != nil && !IsNil(o.BackdropPath) {
		return true
	}

	return false
}

// SetBackdropPath gets a reference to the given string and assigns it to the BackdropPath field.
func (o *MovieResult) SetBackdropPath(v string) {
	o.BackdropPath = &v
}

// GetVoteCount returns the VoteCount field value if set, zero value otherwise.
func (o *MovieResult) GetVoteCount() float32 {
	if o == nil || IsNil(o.VoteCount) {
		var ret float32
		return ret
	}
	return *o.VoteCount
}

// GetVoteCountOk returns a tuple with the VoteCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResult) GetVoteCountOk() (*float32, bool) {
	if o == nil || IsNil(o.VoteCount) {
		return nil, false
	}
	return o.VoteCount, true
}

// HasVoteCount returns a boolean if a field has been set.
func (o *MovieResult) HasVoteCount() bool {
	if o != nil && !IsNil(o.VoteCount) {
		return true
	}

	return false
}

// SetVoteCount gets a reference to the given float32 and assigns it to the VoteCount field.
func (o *MovieResult) SetVoteCount(v float32) {
	o.VoteCount = &v
}

// GetVoteAverage returns the VoteAverage field value if set, zero value otherwise.
func (o *MovieResult) GetVoteAverage() float32 {
	if o == nil || IsNil(o.VoteAverage) {
		var ret float32
		return ret
	}
	return *o.VoteAverage
}

// GetVoteAverageOk returns a tuple with the VoteAverage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResult) GetVoteAverageOk() (*float32, bool) {
	if o == nil || IsNil(o.VoteAverage) {
		return nil, false
	}
	return o.VoteAverage, true
}

// HasVoteAverage returns a boolean if a field has been set.
func (o *MovieResult) HasVoteAverage() bool {
	if o != nil && !IsNil(o.VoteAverage) {
		return true
	}

	return false
}

// SetVoteAverage gets a reference to the given float32 and assigns it to the VoteAverage field.
func (o *MovieResult) SetVoteAverage(v float32) {
	o.VoteAverage = &v
}

// GetGenreIds returns the GenreIds field value if set, zero value otherwise.
func (o *MovieResult) GetGenreIds() []float32 {
	if o == nil || IsNil(o.GenreIds) {
		var ret []float32
		return ret
	}
	return o.GenreIds
}

// GetGenreIdsOk returns a tuple with the GenreIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResult) GetGenreIdsOk() ([]float32, bool) {
	if o == nil || IsNil(o.GenreIds) {
		return nil, false
	}
	return o.GenreIds, true
}

// HasGenreIds returns a boolean if a field has been set.
func (o *MovieResult) HasGenreIds() bool {
	if o != nil && !IsNil(o.GenreIds) {
		return true
	}

	return false
}

// SetGenreIds gets a reference to the given []float32 and assigns it to the GenreIds field.
func (o *MovieResult) SetGenreIds(v []float32) {
	o.GenreIds = v
}

// GetOverview returns the Overview field value if set, zero value otherwise.
func (o *MovieResult) GetOverview() string {
	if o == nil || IsNil(o.Overview) {
		var ret string
		return ret
	}
	return *o.Overview
}

// GetOverviewOk returns a tuple with the Overview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResult) GetOverviewOk() (*string, bool) {
	if o == nil || IsNil(o.Overview) {
		return nil, false
	}
	return o.Overview, true
}

// HasOverview returns a boolean if a field has been set.
func (o *MovieResult) HasOverview() bool {
	if o != nil && !IsNil(o.Overview) {
		return true
	}

	return false
}

// SetOverview gets a reference to the given string and assigns it to the Overview field.
func (o *MovieResult) SetOverview(v string) {
	o.Overview = &v
}

// GetOriginalLanguage returns the OriginalLanguage field value if set, zero value otherwise.
func (o *MovieResult) GetOriginalLanguage() string {
	if o == nil || IsNil(o.OriginalLanguage) {
		var ret string
		return ret
	}
	return *o.OriginalLanguage
}

// GetOriginalLanguageOk returns a tuple with the OriginalLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResult) GetOriginalLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.OriginalLanguage) {
		return nil, false
	}
	return o.OriginalLanguage, true
}

// HasOriginalLanguage returns a boolean if a field has been set.
func (o *MovieResult) HasOriginalLanguage() bool {
	if o != nil && !IsNil(o.OriginalLanguage) {
		return true
	}

	return false
}

// SetOriginalLanguage gets a reference to the given string and assigns it to the OriginalLanguage field.
func (o *MovieResult) SetOriginalLanguage(v string) {
	o.OriginalLanguage = &v
}

// GetTitle returns the Title field value
func (o *MovieResult) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *MovieResult) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *MovieResult) SetTitle(v string) {
	o.Title = v
}

// GetOriginalTitle returns the OriginalTitle field value if set, zero value otherwise.
func (o *MovieResult) GetOriginalTitle() string {
	if o == nil || IsNil(o.OriginalTitle) {
		var ret string
		return ret
	}
	return *o.OriginalTitle
}

// GetOriginalTitleOk returns a tuple with the OriginalTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResult) GetOriginalTitleOk() (*string, bool) {
	if o == nil || IsNil(o.OriginalTitle) {
		return nil, false
	}
	return o.OriginalTitle, true
}

// HasOriginalTitle returns a boolean if a field has been set.
func (o *MovieResult) HasOriginalTitle() bool {
	if o != nil && !IsNil(o.OriginalTitle) {
		return true
	}

	return false
}

// SetOriginalTitle gets a reference to the given string and assigns it to the OriginalTitle field.
func (o *MovieResult) SetOriginalTitle(v string) {
	o.OriginalTitle = &v
}

// GetReleaseDate returns the ReleaseDate field value if set, zero value otherwise.
func (o *MovieResult) GetReleaseDate() string {
	if o == nil || IsNil(o.ReleaseDate) {
		var ret string
		return ret
	}
	return *o.ReleaseDate
}

// GetReleaseDateOk returns a tuple with the ReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResult) GetReleaseDateOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseDate) {
		return nil, false
	}
	return o.ReleaseDate, true
}

// HasReleaseDate returns a boolean if a field has been set.
func (o *MovieResult) HasReleaseDate() bool {
	if o != nil && !IsNil(o.ReleaseDate) {
		return true
	}

	return false
}

// SetReleaseDate gets a reference to the given string and assigns it to the ReleaseDate field.
func (o *MovieResult) SetReleaseDate(v string) {
	o.ReleaseDate = &v
}

// GetAdult returns the Adult field value if set, zero value otherwise.
func (o *MovieResult) GetAdult() bool {
	if o == nil || IsNil(o.Adult) {
		var ret bool
		return ret
	}
	return *o.Adult
}

// GetAdultOk returns a tuple with the Adult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResult) GetAdultOk() (*bool, bool) {
	if o == nil || IsNil(o.Adult) {
		return nil, false
	}
	return o.Adult, true
}

// HasAdult returns a boolean if a field has been set.
func (o *MovieResult) HasAdult() bool {
	if o != nil && !IsNil(o.Adult) {
		return true
	}

	return false
}

// SetAdult gets a reference to the given bool and assigns it to the Adult field.
func (o *MovieResult) SetAdult(v bool) {
	o.Adult = &v
}

// GetVideo returns the Video field value if set, zero value otherwise.
func (o *MovieResult) GetVideo() bool {
	if o == nil || IsNil(o.Video) {
		var ret bool
		return ret
	}
	return *o.Video
}

// GetVideoOk returns a tuple with the Video field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResult) GetVideoOk() (*bool, bool) {
	if o == nil || IsNil(o.Video) {
		return nil, false
	}
	return o.Video, true
}

// HasVideo returns a boolean if a field has been set.
func (o *MovieResult) HasVideo() bool {
	if o != nil && !IsNil(o.Video) {
		return true
	}

	return false
}

// SetVideo gets a reference to the given bool and assigns it to the Video field.
func (o *MovieResult) SetVideo(v bool) {
	o.Video = &v
}

// GetMediaInfo returns the MediaInfo field value if set, zero value otherwise.
func (o *MovieResult) GetMediaInfo() MediaInfo {
	if o == nil || IsNil(o.MediaInfo) {
		var ret MediaInfo
		return ret
	}
	return *o.MediaInfo
}

// GetMediaInfoOk returns a tuple with the MediaInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResult) GetMediaInfoOk() (*MediaInfo, bool) {
	if o == nil || IsNil(o.MediaInfo) {
		return nil, false
	}
	return o.MediaInfo, true
}

// HasMediaInfo returns a boolean if a field has been set.
func (o *MovieResult) HasMediaInfo() bool {
	if o != nil && !IsNil(o.MediaInfo) {
		return true
	}

	return false
}

// SetMediaInfo gets a reference to the given MediaInfo and assigns it to the MediaInfo field.
func (o *MovieResult) SetMediaInfo(v MediaInfo) {
	o.MediaInfo = &v
}

func (o MovieResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MovieResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["mediaType"] = o.MediaType
	if !IsNil(o.Popularity) {
		toSerialize["popularity"] = o.Popularity
	}
	if !IsNil(o.PosterPath) {
		toSerialize["posterPath"] = o.PosterPath
	}
	if !IsNil(o.BackdropPath) {
		toSerialize["backdropPath"] = o.BackdropPath
	}
	if !IsNil(o.VoteCount) {
		toSerialize["voteCount"] = o.VoteCount
	}
	if !IsNil(o.VoteAverage) {
		toSerialize["voteAverage"] = o.VoteAverage
	}
	if !IsNil(o.GenreIds) {
		toSerialize["genreIds"] = o.GenreIds
	}
	if !IsNil(o.Overview) {
		toSerialize["overview"] = o.Overview
	}
	if !IsNil(o.OriginalLanguage) {
		toSerialize["originalLanguage"] = o.OriginalLanguage
	}
	toSerialize["title"] = o.Title
	if !IsNil(o.OriginalTitle) {
		toSerialize["originalTitle"] = o.OriginalTitle
	}
	if !IsNil(o.ReleaseDate) {
		toSerialize["releaseDate"] = o.ReleaseDate
	}
	if !IsNil(o.Adult) {
		toSerialize["adult"] = o.Adult
	}
	if !IsNil(o.Video) {
		toSerialize["video"] = o.Video
	}
	if !IsNil(o.MediaInfo) {
		toSerialize["mediaInfo"] = o.MediaInfo
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MovieResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"mediaType",
		"title",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMovieResult := _MovieResult{}

	err = json.Unmarshal(data, &varMovieResult)

	if err != nil {
		return err
	}

	*o = MovieResult(varMovieResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "mediaType")
		delete(additionalProperties, "popularity")
		delete(additionalProperties, "posterPath")
		delete(additionalProperties, "backdropPath")
		delete(additionalProperties, "voteCount")
		delete(additionalProperties, "voteAverage")
		delete(additionalProperties, "genreIds")
		delete(additionalProperties, "overview")
		delete(additionalProperties, "originalLanguage")
		delete(additionalProperties, "title")
		delete(additionalProperties, "originalTitle")
		delete(additionalProperties, "releaseDate")
		delete(additionalProperties, "adult")
		delete(additionalProperties, "video")
		delete(additionalProperties, "mediaInfo")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMovieResult struct {
	value *MovieResult
	isSet bool
}

func (v NullableMovieResult) Get() *MovieResult {
	return v.value
}

func (v *NullableMovieResult) Set(val *MovieResult) {
	v.value = val
	v.isSet = true
}

func (v NullableMovieResult) IsSet() bool {
	return v.isSet
}

func (v *NullableMovieResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMovieResult(val *MovieResult) *NullableMovieResult {
	return &NullableMovieResult{value: val, isSet: true}
}

func (v NullableMovieResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMovieResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


