/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr

import (
	"encoding/json"
)

// GetCache200Response struct for GetCache200Response
type GetCache200Response struct {
	ImageCache *GetCache200ResponseImageCache `json:"imageCache,omitempty"`
	ApiCaches []*GetCache200ResponseApiCachesInner `json:"apiCaches,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetCache200Response GetCache200Response

// NewGetCache200Response instantiates a new GetCache200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetCache200Response() *GetCache200Response {
	this := GetCache200Response{}
	return &this
}

// NewGetCache200ResponseWithDefaults instantiates a new GetCache200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetCache200ResponseWithDefaults() *GetCache200Response {
	this := GetCache200Response{}
	return &this
}

// GetImageCache returns the ImageCache field value if set, zero value otherwise.
func (o *GetCache200Response) GetImageCache() GetCache200ResponseImageCache {
	if o == nil || isNil(o.ImageCache) {
		var ret GetCache200ResponseImageCache
		return ret
	}
	return *o.ImageCache
}

// GetImageCacheOk returns a tuple with the ImageCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCache200Response) GetImageCacheOk() (*GetCache200ResponseImageCache, bool) {
	if o == nil || isNil(o.ImageCache) {
    return nil, false
	}
	return o.ImageCache, true
}

// HasImageCache returns a boolean if a field has been set.
func (o *GetCache200Response) HasImageCache() bool {
	if o != nil && !isNil(o.ImageCache) {
		return true
	}

	return false
}

// SetImageCache gets a reference to the given GetCache200ResponseImageCache and assigns it to the ImageCache field.
func (o *GetCache200Response) SetImageCache(v GetCache200ResponseImageCache) {
	o.ImageCache = &v
}

// GetApiCaches returns the ApiCaches field value if set, zero value otherwise.
func (o *GetCache200Response) GetApiCaches() []*GetCache200ResponseApiCachesInner {
	if o == nil || isNil(o.ApiCaches) {
		var ret []*GetCache200ResponseApiCachesInner
		return ret
	}
	return o.ApiCaches
}

// GetApiCachesOk returns a tuple with the ApiCaches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCache200Response) GetApiCachesOk() ([]*GetCache200ResponseApiCachesInner, bool) {
	if o == nil || isNil(o.ApiCaches) {
    return nil, false
	}
	return o.ApiCaches, true
}

// HasApiCaches returns a boolean if a field has been set.
func (o *GetCache200Response) HasApiCaches() bool {
	if o != nil && !isNil(o.ApiCaches) {
		return true
	}

	return false
}

// SetApiCaches gets a reference to the given []GetCache200ResponseApiCachesInner and assigns it to the ApiCaches field.
func (o *GetCache200Response) SetApiCaches(v []*GetCache200ResponseApiCachesInner) {
	o.ApiCaches = v
}

func (o GetCache200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ImageCache) {
		toSerialize["imageCache"] = o.ImageCache
	}
	if !isNil(o.ApiCaches) {
		toSerialize["apiCaches"] = o.ApiCaches
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *GetCache200Response) UnmarshalJSON(bytes []byte) (err error) {
	varGetCache200Response := _GetCache200Response{}

	if err = json.Unmarshal(bytes, &varGetCache200Response); err == nil {
		*o = GetCache200Response(varGetCache200Response)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "imageCache")
		delete(additionalProperties, "apiCaches")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetCache200Response struct {
	value *GetCache200Response
	isSet bool
}

func (v NullableGetCache200Response) Get() *GetCache200Response {
	return v.value
}

func (v *NullableGetCache200Response) Set(val *GetCache200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCache200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCache200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCache200Response(val *GetCache200Response) *NullableGetCache200Response {
	return &NullableGetCache200Response{value: val, isSet: true}
}

func (v NullableGetCache200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCache200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


