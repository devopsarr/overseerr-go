/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: v1.33.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr

import (
	"encoding/json"
)

// MainSettings struct for MainSettings
type MainSettings struct {
	ApiKey *string `json:"apiKey,omitempty"`
	AppLanguage *string `json:"appLanguage,omitempty"`
	ApplicationTitle *string `json:"applicationTitle,omitempty"`
	ApplicationUrl *string `json:"applicationUrl,omitempty"`
	TrustProxy *bool `json:"trustProxy,omitempty"`
	CsrfProtection *bool `json:"csrfProtection,omitempty"`
	HideAvailable *bool `json:"hideAvailable,omitempty"`
	PartialRequestsEnabled *bool `json:"partialRequestsEnabled,omitempty"`
	LocalLogin *bool `json:"localLogin,omitempty"`
	NewPlexLogin *bool `json:"newPlexLogin,omitempty"`
	DefaultPermissions *float32 `json:"defaultPermissions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MainSettings MainSettings

// NewMainSettings instantiates a new MainSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMainSettings() *MainSettings {
	this := MainSettings{}
	return &this
}

// NewMainSettingsWithDefaults instantiates a new MainSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMainSettingsWithDefaults() *MainSettings {
	this := MainSettings{}
	return &this
}

// GetApiKey returns the ApiKey field value if set, zero value otherwise.
func (o *MainSettings) GetApiKey() string {
	if o == nil || isNil(o.ApiKey) {
		var ret string
		return ret
	}
	return *o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainSettings) GetApiKeyOk() (*string, bool) {
	if o == nil || isNil(o.ApiKey) {
    return nil, false
	}
	return o.ApiKey, true
}

// HasApiKey returns a boolean if a field has been set.
func (o *MainSettings) HasApiKey() bool {
	if o != nil && !isNil(o.ApiKey) {
		return true
	}

	return false
}

// SetApiKey gets a reference to the given string and assigns it to the ApiKey field.
func (o *MainSettings) SetApiKey(v string) {
	o.ApiKey = &v
}

// GetAppLanguage returns the AppLanguage field value if set, zero value otherwise.
func (o *MainSettings) GetAppLanguage() string {
	if o == nil || isNil(o.AppLanguage) {
		var ret string
		return ret
	}
	return *o.AppLanguage
}

// GetAppLanguageOk returns a tuple with the AppLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainSettings) GetAppLanguageOk() (*string, bool) {
	if o == nil || isNil(o.AppLanguage) {
    return nil, false
	}
	return o.AppLanguage, true
}

// HasAppLanguage returns a boolean if a field has been set.
func (o *MainSettings) HasAppLanguage() bool {
	if o != nil && !isNil(o.AppLanguage) {
		return true
	}

	return false
}

// SetAppLanguage gets a reference to the given string and assigns it to the AppLanguage field.
func (o *MainSettings) SetAppLanguage(v string) {
	o.AppLanguage = &v
}

// GetApplicationTitle returns the ApplicationTitle field value if set, zero value otherwise.
func (o *MainSettings) GetApplicationTitle() string {
	if o == nil || isNil(o.ApplicationTitle) {
		var ret string
		return ret
	}
	return *o.ApplicationTitle
}

// GetApplicationTitleOk returns a tuple with the ApplicationTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainSettings) GetApplicationTitleOk() (*string, bool) {
	if o == nil || isNil(o.ApplicationTitle) {
    return nil, false
	}
	return o.ApplicationTitle, true
}

// HasApplicationTitle returns a boolean if a field has been set.
func (o *MainSettings) HasApplicationTitle() bool {
	if o != nil && !isNil(o.ApplicationTitle) {
		return true
	}

	return false
}

// SetApplicationTitle gets a reference to the given string and assigns it to the ApplicationTitle field.
func (o *MainSettings) SetApplicationTitle(v string) {
	o.ApplicationTitle = &v
}

// GetApplicationUrl returns the ApplicationUrl field value if set, zero value otherwise.
func (o *MainSettings) GetApplicationUrl() string {
	if o == nil || isNil(o.ApplicationUrl) {
		var ret string
		return ret
	}
	return *o.ApplicationUrl
}

// GetApplicationUrlOk returns a tuple with the ApplicationUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainSettings) GetApplicationUrlOk() (*string, bool) {
	if o == nil || isNil(o.ApplicationUrl) {
    return nil, false
	}
	return o.ApplicationUrl, true
}

// HasApplicationUrl returns a boolean if a field has been set.
func (o *MainSettings) HasApplicationUrl() bool {
	if o != nil && !isNil(o.ApplicationUrl) {
		return true
	}

	return false
}

// SetApplicationUrl gets a reference to the given string and assigns it to the ApplicationUrl field.
func (o *MainSettings) SetApplicationUrl(v string) {
	o.ApplicationUrl = &v
}

// GetTrustProxy returns the TrustProxy field value if set, zero value otherwise.
func (o *MainSettings) GetTrustProxy() bool {
	if o == nil || isNil(o.TrustProxy) {
		var ret bool
		return ret
	}
	return *o.TrustProxy
}

// GetTrustProxyOk returns a tuple with the TrustProxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainSettings) GetTrustProxyOk() (*bool, bool) {
	if o == nil || isNil(o.TrustProxy) {
    return nil, false
	}
	return o.TrustProxy, true
}

// HasTrustProxy returns a boolean if a field has been set.
func (o *MainSettings) HasTrustProxy() bool {
	if o != nil && !isNil(o.TrustProxy) {
		return true
	}

	return false
}

// SetTrustProxy gets a reference to the given bool and assigns it to the TrustProxy field.
func (o *MainSettings) SetTrustProxy(v bool) {
	o.TrustProxy = &v
}

// GetCsrfProtection returns the CsrfProtection field value if set, zero value otherwise.
func (o *MainSettings) GetCsrfProtection() bool {
	if o == nil || isNil(o.CsrfProtection) {
		var ret bool
		return ret
	}
	return *o.CsrfProtection
}

// GetCsrfProtectionOk returns a tuple with the CsrfProtection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainSettings) GetCsrfProtectionOk() (*bool, bool) {
	if o == nil || isNil(o.CsrfProtection) {
    return nil, false
	}
	return o.CsrfProtection, true
}

// HasCsrfProtection returns a boolean if a field has been set.
func (o *MainSettings) HasCsrfProtection() bool {
	if o != nil && !isNil(o.CsrfProtection) {
		return true
	}

	return false
}

// SetCsrfProtection gets a reference to the given bool and assigns it to the CsrfProtection field.
func (o *MainSettings) SetCsrfProtection(v bool) {
	o.CsrfProtection = &v
}

// GetHideAvailable returns the HideAvailable field value if set, zero value otherwise.
func (o *MainSettings) GetHideAvailable() bool {
	if o == nil || isNil(o.HideAvailable) {
		var ret bool
		return ret
	}
	return *o.HideAvailable
}

// GetHideAvailableOk returns a tuple with the HideAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainSettings) GetHideAvailableOk() (*bool, bool) {
	if o == nil || isNil(o.HideAvailable) {
    return nil, false
	}
	return o.HideAvailable, true
}

// HasHideAvailable returns a boolean if a field has been set.
func (o *MainSettings) HasHideAvailable() bool {
	if o != nil && !isNil(o.HideAvailable) {
		return true
	}

	return false
}

// SetHideAvailable gets a reference to the given bool and assigns it to the HideAvailable field.
func (o *MainSettings) SetHideAvailable(v bool) {
	o.HideAvailable = &v
}

// GetPartialRequestsEnabled returns the PartialRequestsEnabled field value if set, zero value otherwise.
func (o *MainSettings) GetPartialRequestsEnabled() bool {
	if o == nil || isNil(o.PartialRequestsEnabled) {
		var ret bool
		return ret
	}
	return *o.PartialRequestsEnabled
}

// GetPartialRequestsEnabledOk returns a tuple with the PartialRequestsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainSettings) GetPartialRequestsEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.PartialRequestsEnabled) {
    return nil, false
	}
	return o.PartialRequestsEnabled, true
}

// HasPartialRequestsEnabled returns a boolean if a field has been set.
func (o *MainSettings) HasPartialRequestsEnabled() bool {
	if o != nil && !isNil(o.PartialRequestsEnabled) {
		return true
	}

	return false
}

// SetPartialRequestsEnabled gets a reference to the given bool and assigns it to the PartialRequestsEnabled field.
func (o *MainSettings) SetPartialRequestsEnabled(v bool) {
	o.PartialRequestsEnabled = &v
}

// GetLocalLogin returns the LocalLogin field value if set, zero value otherwise.
func (o *MainSettings) GetLocalLogin() bool {
	if o == nil || isNil(o.LocalLogin) {
		var ret bool
		return ret
	}
	return *o.LocalLogin
}

// GetLocalLoginOk returns a tuple with the LocalLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainSettings) GetLocalLoginOk() (*bool, bool) {
	if o == nil || isNil(o.LocalLogin) {
    return nil, false
	}
	return o.LocalLogin, true
}

// HasLocalLogin returns a boolean if a field has been set.
func (o *MainSettings) HasLocalLogin() bool {
	if o != nil && !isNil(o.LocalLogin) {
		return true
	}

	return false
}

// SetLocalLogin gets a reference to the given bool and assigns it to the LocalLogin field.
func (o *MainSettings) SetLocalLogin(v bool) {
	o.LocalLogin = &v
}

// GetNewPlexLogin returns the NewPlexLogin field value if set, zero value otherwise.
func (o *MainSettings) GetNewPlexLogin() bool {
	if o == nil || isNil(o.NewPlexLogin) {
		var ret bool
		return ret
	}
	return *o.NewPlexLogin
}

// GetNewPlexLoginOk returns a tuple with the NewPlexLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainSettings) GetNewPlexLoginOk() (*bool, bool) {
	if o == nil || isNil(o.NewPlexLogin) {
    return nil, false
	}
	return o.NewPlexLogin, true
}

// HasNewPlexLogin returns a boolean if a field has been set.
func (o *MainSettings) HasNewPlexLogin() bool {
	if o != nil && !isNil(o.NewPlexLogin) {
		return true
	}

	return false
}

// SetNewPlexLogin gets a reference to the given bool and assigns it to the NewPlexLogin field.
func (o *MainSettings) SetNewPlexLogin(v bool) {
	o.NewPlexLogin = &v
}

// GetDefaultPermissions returns the DefaultPermissions field value if set, zero value otherwise.
func (o *MainSettings) GetDefaultPermissions() float32 {
	if o == nil || isNil(o.DefaultPermissions) {
		var ret float32
		return ret
	}
	return *o.DefaultPermissions
}

// GetDefaultPermissionsOk returns a tuple with the DefaultPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MainSettings) GetDefaultPermissionsOk() (*float32, bool) {
	if o == nil || isNil(o.DefaultPermissions) {
    return nil, false
	}
	return o.DefaultPermissions, true
}

// HasDefaultPermissions returns a boolean if a field has been set.
func (o *MainSettings) HasDefaultPermissions() bool {
	if o != nil && !isNil(o.DefaultPermissions) {
		return true
	}

	return false
}

// SetDefaultPermissions gets a reference to the given float32 and assigns it to the DefaultPermissions field.
func (o *MainSettings) SetDefaultPermissions(v float32) {
	o.DefaultPermissions = &v
}

func (o MainSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ApiKey) {
		toSerialize["apiKey"] = o.ApiKey
	}
	if !isNil(o.AppLanguage) {
		toSerialize["appLanguage"] = o.AppLanguage
	}
	if !isNil(o.ApplicationTitle) {
		toSerialize["applicationTitle"] = o.ApplicationTitle
	}
	if !isNil(o.ApplicationUrl) {
		toSerialize["applicationUrl"] = o.ApplicationUrl
	}
	if !isNil(o.TrustProxy) {
		toSerialize["trustProxy"] = o.TrustProxy
	}
	if !isNil(o.CsrfProtection) {
		toSerialize["csrfProtection"] = o.CsrfProtection
	}
	if !isNil(o.HideAvailable) {
		toSerialize["hideAvailable"] = o.HideAvailable
	}
	if !isNil(o.PartialRequestsEnabled) {
		toSerialize["partialRequestsEnabled"] = o.PartialRequestsEnabled
	}
	if !isNil(o.LocalLogin) {
		toSerialize["localLogin"] = o.LocalLogin
	}
	if !isNil(o.NewPlexLogin) {
		toSerialize["newPlexLogin"] = o.NewPlexLogin
	}
	if !isNil(o.DefaultPermissions) {
		toSerialize["defaultPermissions"] = o.DefaultPermissions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *MainSettings) UnmarshalJSON(bytes []byte) (err error) {
	varMainSettings := _MainSettings{}

	if err = json.Unmarshal(bytes, &varMainSettings); err == nil {
		*o = MainSettings(varMainSettings)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "apiKey")
		delete(additionalProperties, "appLanguage")
		delete(additionalProperties, "applicationTitle")
		delete(additionalProperties, "applicationUrl")
		delete(additionalProperties, "trustProxy")
		delete(additionalProperties, "csrfProtection")
		delete(additionalProperties, "hideAvailable")
		delete(additionalProperties, "partialRequestsEnabled")
		delete(additionalProperties, "localLogin")
		delete(additionalProperties, "newPlexLogin")
		delete(additionalProperties, "defaultPermissions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMainSettings struct {
	value *MainSettings
	isSet bool
}

func (v NullableMainSettings) Get() *MainSettings {
	return v.value
}

func (v *NullableMainSettings) Set(val *MainSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableMainSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableMainSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMainSettings(val *MainSettings) *NullableMainSettings {
	return &NullableMainSettings{value: val, isSet: true}
}

func (v NullableMainSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMainSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


