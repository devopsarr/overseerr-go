/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr

import (
	"encoding/json"
)

// CreateIssueRequest struct for CreateIssueRequest
type CreateIssueRequest struct {
	IssueType *float32 `json:"issueType,omitempty"`
	Message *string `json:"message,omitempty"`
	MediaId *float32 `json:"mediaId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateIssueRequest CreateIssueRequest

// NewCreateIssueRequest instantiates a new CreateIssueRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateIssueRequest() *CreateIssueRequest {
	this := CreateIssueRequest{}
	return &this
}

// NewCreateIssueRequestWithDefaults instantiates a new CreateIssueRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateIssueRequestWithDefaults() *CreateIssueRequest {
	this := CreateIssueRequest{}
	return &this
}

// GetIssueType returns the IssueType field value if set, zero value otherwise.
func (o *CreateIssueRequest) GetIssueType() float32 {
	if o == nil || isNil(o.IssueType) {
		var ret float32
		return ret
	}
	return *o.IssueType
}

// GetIssueTypeOk returns a tuple with the IssueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateIssueRequest) GetIssueTypeOk() (*float32, bool) {
	if o == nil || isNil(o.IssueType) {
    return nil, false
	}
	return o.IssueType, true
}

// HasIssueType returns a boolean if a field has been set.
func (o *CreateIssueRequest) HasIssueType() bool {
	if o != nil && !isNil(o.IssueType) {
		return true
	}

	return false
}

// SetIssueType gets a reference to the given float32 and assigns it to the IssueType field.
func (o *CreateIssueRequest) SetIssueType(v float32) {
	o.IssueType = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *CreateIssueRequest) GetMessage() string {
	if o == nil || isNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateIssueRequest) GetMessageOk() (*string, bool) {
	if o == nil || isNil(o.Message) {
    return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *CreateIssueRequest) HasMessage() bool {
	if o != nil && !isNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *CreateIssueRequest) SetMessage(v string) {
	o.Message = &v
}

// GetMediaId returns the MediaId field value if set, zero value otherwise.
func (o *CreateIssueRequest) GetMediaId() float32 {
	if o == nil || isNil(o.MediaId) {
		var ret float32
		return ret
	}
	return *o.MediaId
}

// GetMediaIdOk returns a tuple with the MediaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateIssueRequest) GetMediaIdOk() (*float32, bool) {
	if o == nil || isNil(o.MediaId) {
    return nil, false
	}
	return o.MediaId, true
}

// HasMediaId returns a boolean if a field has been set.
func (o *CreateIssueRequest) HasMediaId() bool {
	if o != nil && !isNil(o.MediaId) {
		return true
	}

	return false
}

// SetMediaId gets a reference to the given float32 and assigns it to the MediaId field.
func (o *CreateIssueRequest) SetMediaId(v float32) {
	o.MediaId = &v
}

func (o CreateIssueRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.IssueType) {
		toSerialize["issueType"] = o.IssueType
	}
	if !isNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !isNil(o.MediaId) {
		toSerialize["mediaId"] = o.MediaId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CreateIssueRequest) UnmarshalJSON(bytes []byte) (err error) {
	varCreateIssueRequest := _CreateIssueRequest{}

	if err = json.Unmarshal(bytes, &varCreateIssueRequest); err == nil {
		*o = CreateIssueRequest(varCreateIssueRequest)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "issueType")
		delete(additionalProperties, "message")
		delete(additionalProperties, "mediaId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateIssueRequest struct {
	value *CreateIssueRequest
	isSet bool
}

func (v NullableCreateIssueRequest) Get() *CreateIssueRequest {
	return v.value
}

func (v *NullableCreateIssueRequest) Set(val *CreateIssueRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateIssueRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateIssueRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateIssueRequest(val *CreateIssueRequest) *NullableCreateIssueRequest {
	return &NullableCreateIssueRequest{value: val, isSet: true}
}

func (v NullableCreateIssueRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateIssueRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


