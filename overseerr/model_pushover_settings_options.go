/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr

import (
	"encoding/json"
)

// PushoverSettingsOptions struct for PushoverSettingsOptions
type PushoverSettingsOptions struct {
	AccessToken *string `json:"accessToken,omitempty"`
	UserToken *string `json:"userToken,omitempty"`
	Sound *string `json:"sound,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PushoverSettingsOptions PushoverSettingsOptions

// NewPushoverSettingsOptions instantiates a new PushoverSettingsOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPushoverSettingsOptions() *PushoverSettingsOptions {
	this := PushoverSettingsOptions{}
	return &this
}

// NewPushoverSettingsOptionsWithDefaults instantiates a new PushoverSettingsOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPushoverSettingsOptionsWithDefaults() *PushoverSettingsOptions {
	this := PushoverSettingsOptions{}
	return &this
}

// GetAccessToken returns the AccessToken field value if set, zero value otherwise.
func (o *PushoverSettingsOptions) GetAccessToken() string {
	if o == nil || isNil(o.AccessToken) {
		var ret string
		return ret
	}
	return *o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushoverSettingsOptions) GetAccessTokenOk() (*string, bool) {
	if o == nil || isNil(o.AccessToken) {
    return nil, false
	}
	return o.AccessToken, true
}

// HasAccessToken returns a boolean if a field has been set.
func (o *PushoverSettingsOptions) HasAccessToken() bool {
	if o != nil && !isNil(o.AccessToken) {
		return true
	}

	return false
}

// SetAccessToken gets a reference to the given string and assigns it to the AccessToken field.
func (o *PushoverSettingsOptions) SetAccessToken(v string) {
	o.AccessToken = &v
}

// GetUserToken returns the UserToken field value if set, zero value otherwise.
func (o *PushoverSettingsOptions) GetUserToken() string {
	if o == nil || isNil(o.UserToken) {
		var ret string
		return ret
	}
	return *o.UserToken
}

// GetUserTokenOk returns a tuple with the UserToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushoverSettingsOptions) GetUserTokenOk() (*string, bool) {
	if o == nil || isNil(o.UserToken) {
    return nil, false
	}
	return o.UserToken, true
}

// HasUserToken returns a boolean if a field has been set.
func (o *PushoverSettingsOptions) HasUserToken() bool {
	if o != nil && !isNil(o.UserToken) {
		return true
	}

	return false
}

// SetUserToken gets a reference to the given string and assigns it to the UserToken field.
func (o *PushoverSettingsOptions) SetUserToken(v string) {
	o.UserToken = &v
}

// GetSound returns the Sound field value if set, zero value otherwise.
func (o *PushoverSettingsOptions) GetSound() string {
	if o == nil || isNil(o.Sound) {
		var ret string
		return ret
	}
	return *o.Sound
}

// GetSoundOk returns a tuple with the Sound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushoverSettingsOptions) GetSoundOk() (*string, bool) {
	if o == nil || isNil(o.Sound) {
    return nil, false
	}
	return o.Sound, true
}

// HasSound returns a boolean if a field has been set.
func (o *PushoverSettingsOptions) HasSound() bool {
	if o != nil && !isNil(o.Sound) {
		return true
	}

	return false
}

// SetSound gets a reference to the given string and assigns it to the Sound field.
func (o *PushoverSettingsOptions) SetSound(v string) {
	o.Sound = &v
}

func (o PushoverSettingsOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AccessToken) {
		toSerialize["accessToken"] = o.AccessToken
	}
	if !isNil(o.UserToken) {
		toSerialize["userToken"] = o.UserToken
	}
	if !isNil(o.Sound) {
		toSerialize["sound"] = o.Sound
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PushoverSettingsOptions) UnmarshalJSON(bytes []byte) (err error) {
	varPushoverSettingsOptions := _PushoverSettingsOptions{}

	if err = json.Unmarshal(bytes, &varPushoverSettingsOptions); err == nil {
		*o = PushoverSettingsOptions(varPushoverSettingsOptions)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "accessToken")
		delete(additionalProperties, "userToken")
		delete(additionalProperties, "sound")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePushoverSettingsOptions struct {
	value *PushoverSettingsOptions
	isSet bool
}

func (v NullablePushoverSettingsOptions) Get() *PushoverSettingsOptions {
	return v.value
}

func (v *NullablePushoverSettingsOptions) Set(val *PushoverSettingsOptions) {
	v.value = val
	v.isSet = true
}

func (v NullablePushoverSettingsOptions) IsSet() bool {
	return v.isSet
}

func (v *NullablePushoverSettingsOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePushoverSettingsOptions(val *PushoverSettingsOptions) *NullablePushoverSettingsOptions {
	return &NullablePushoverSettingsOptions{value: val, isSet: true}
}

func (v NullablePushoverSettingsOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePushoverSettingsOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


