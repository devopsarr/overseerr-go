/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr

import (
	"encoding/json"
)

// LunaSeaSettingsOptions struct for LunaSeaSettingsOptions
type LunaSeaSettingsOptions struct {
	WebhookUrl *string `json:"webhookUrl,omitempty"`
	ProfileName *string `json:"profileName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LunaSeaSettingsOptions LunaSeaSettingsOptions

// NewLunaSeaSettingsOptions instantiates a new LunaSeaSettingsOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLunaSeaSettingsOptions() *LunaSeaSettingsOptions {
	this := LunaSeaSettingsOptions{}
	return &this
}

// NewLunaSeaSettingsOptionsWithDefaults instantiates a new LunaSeaSettingsOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLunaSeaSettingsOptionsWithDefaults() *LunaSeaSettingsOptions {
	this := LunaSeaSettingsOptions{}
	return &this
}

// GetWebhookUrl returns the WebhookUrl field value if set, zero value otherwise.
func (o *LunaSeaSettingsOptions) GetWebhookUrl() string {
	if o == nil || isNil(o.WebhookUrl) {
		var ret string
		return ret
	}
	return *o.WebhookUrl
}

// GetWebhookUrlOk returns a tuple with the WebhookUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LunaSeaSettingsOptions) GetWebhookUrlOk() (*string, bool) {
	if o == nil || isNil(o.WebhookUrl) {
    return nil, false
	}
	return o.WebhookUrl, true
}

// HasWebhookUrl returns a boolean if a field has been set.
func (o *LunaSeaSettingsOptions) HasWebhookUrl() bool {
	if o != nil && !isNil(o.WebhookUrl) {
		return true
	}

	return false
}

// SetWebhookUrl gets a reference to the given string and assigns it to the WebhookUrl field.
func (o *LunaSeaSettingsOptions) SetWebhookUrl(v string) {
	o.WebhookUrl = &v
}

// GetProfileName returns the ProfileName field value if set, zero value otherwise.
func (o *LunaSeaSettingsOptions) GetProfileName() string {
	if o == nil || isNil(o.ProfileName) {
		var ret string
		return ret
	}
	return *o.ProfileName
}

// GetProfileNameOk returns a tuple with the ProfileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LunaSeaSettingsOptions) GetProfileNameOk() (*string, bool) {
	if o == nil || isNil(o.ProfileName) {
    return nil, false
	}
	return o.ProfileName, true
}

// HasProfileName returns a boolean if a field has been set.
func (o *LunaSeaSettingsOptions) HasProfileName() bool {
	if o != nil && !isNil(o.ProfileName) {
		return true
	}

	return false
}

// SetProfileName gets a reference to the given string and assigns it to the ProfileName field.
func (o *LunaSeaSettingsOptions) SetProfileName(v string) {
	o.ProfileName = &v
}

func (o LunaSeaSettingsOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.WebhookUrl) {
		toSerialize["webhookUrl"] = o.WebhookUrl
	}
	if !isNil(o.ProfileName) {
		toSerialize["profileName"] = o.ProfileName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *LunaSeaSettingsOptions) UnmarshalJSON(bytes []byte) (err error) {
	varLunaSeaSettingsOptions := _LunaSeaSettingsOptions{}

	if err = json.Unmarshal(bytes, &varLunaSeaSettingsOptions); err == nil {
		*o = LunaSeaSettingsOptions(varLunaSeaSettingsOptions)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "webhookUrl")
		delete(additionalProperties, "profileName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLunaSeaSettingsOptions struct {
	value *LunaSeaSettingsOptions
	isSet bool
}

func (v NullableLunaSeaSettingsOptions) Get() *LunaSeaSettingsOptions {
	return v.value
}

func (v *NullableLunaSeaSettingsOptions) Set(val *LunaSeaSettingsOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableLunaSeaSettingsOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableLunaSeaSettingsOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLunaSeaSettingsOptions(val *LunaSeaSettingsOptions) *NullableLunaSeaSettingsOptions {
	return &NullableLunaSeaSettingsOptions{value: val, isSet: true}
}

func (v NullableLunaSeaSettingsOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLunaSeaSettingsOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


