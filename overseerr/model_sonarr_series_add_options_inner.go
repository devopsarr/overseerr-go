/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: v1.34.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr

import (
	"encoding/json"
)

// checks if the SonarrSeriesAddOptionsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SonarrSeriesAddOptionsInner{}

// SonarrSeriesAddOptionsInner struct for SonarrSeriesAddOptionsInner
type SonarrSeriesAddOptionsInner struct {
	IgnoreEpisodesWithFiles NullableBool `json:"ignoreEpisodesWithFiles,omitempty"`
	IgnoreEpisodesWithoutFiles NullableBool `json:"ignoreEpisodesWithoutFiles,omitempty"`
	SearchForMissingEpisodes NullableBool `json:"searchForMissingEpisodes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SonarrSeriesAddOptionsInner SonarrSeriesAddOptionsInner

// NewSonarrSeriesAddOptionsInner instantiates a new SonarrSeriesAddOptionsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSonarrSeriesAddOptionsInner() *SonarrSeriesAddOptionsInner {
	this := SonarrSeriesAddOptionsInner{}
	return &this
}

// NewSonarrSeriesAddOptionsInnerWithDefaults instantiates a new SonarrSeriesAddOptionsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSonarrSeriesAddOptionsInnerWithDefaults() *SonarrSeriesAddOptionsInner {
	this := SonarrSeriesAddOptionsInner{}
	return &this
}

// GetIgnoreEpisodesWithFiles returns the IgnoreEpisodesWithFiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SonarrSeriesAddOptionsInner) GetIgnoreEpisodesWithFiles() bool {
	if o == nil || IsNil(o.IgnoreEpisodesWithFiles.Get()) {
		var ret bool
		return ret
	}
	return *o.IgnoreEpisodesWithFiles.Get()
}

// GetIgnoreEpisodesWithFilesOk returns a tuple with the IgnoreEpisodesWithFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SonarrSeriesAddOptionsInner) GetIgnoreEpisodesWithFilesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IgnoreEpisodesWithFiles.Get(), o.IgnoreEpisodesWithFiles.IsSet()
}

// HasIgnoreEpisodesWithFiles returns a boolean if a field has been set.
func (o *SonarrSeriesAddOptionsInner) HasIgnoreEpisodesWithFiles() bool {
	if o != nil && o.IgnoreEpisodesWithFiles.IsSet() {
		return true
	}

	return false
}

// SetIgnoreEpisodesWithFiles gets a reference to the given NullableBool and assigns it to the IgnoreEpisodesWithFiles field.
func (o *SonarrSeriesAddOptionsInner) SetIgnoreEpisodesWithFiles(v bool) {
	o.IgnoreEpisodesWithFiles.Set(&v)
}
// SetIgnoreEpisodesWithFilesNil sets the value for IgnoreEpisodesWithFiles to be an explicit nil
func (o *SonarrSeriesAddOptionsInner) SetIgnoreEpisodesWithFilesNil() {
	o.IgnoreEpisodesWithFiles.Set(nil)
}

// UnsetIgnoreEpisodesWithFiles ensures that no value is present for IgnoreEpisodesWithFiles, not even an explicit nil
func (o *SonarrSeriesAddOptionsInner) UnsetIgnoreEpisodesWithFiles() {
	o.IgnoreEpisodesWithFiles.Unset()
}

// GetIgnoreEpisodesWithoutFiles returns the IgnoreEpisodesWithoutFiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SonarrSeriesAddOptionsInner) GetIgnoreEpisodesWithoutFiles() bool {
	if o == nil || IsNil(o.IgnoreEpisodesWithoutFiles.Get()) {
		var ret bool
		return ret
	}
	return *o.IgnoreEpisodesWithoutFiles.Get()
}

// GetIgnoreEpisodesWithoutFilesOk returns a tuple with the IgnoreEpisodesWithoutFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SonarrSeriesAddOptionsInner) GetIgnoreEpisodesWithoutFilesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IgnoreEpisodesWithoutFiles.Get(), o.IgnoreEpisodesWithoutFiles.IsSet()
}

// HasIgnoreEpisodesWithoutFiles returns a boolean if a field has been set.
func (o *SonarrSeriesAddOptionsInner) HasIgnoreEpisodesWithoutFiles() bool {
	if o != nil && o.IgnoreEpisodesWithoutFiles.IsSet() {
		return true
	}

	return false
}

// SetIgnoreEpisodesWithoutFiles gets a reference to the given NullableBool and assigns it to the IgnoreEpisodesWithoutFiles field.
func (o *SonarrSeriesAddOptionsInner) SetIgnoreEpisodesWithoutFiles(v bool) {
	o.IgnoreEpisodesWithoutFiles.Set(&v)
}
// SetIgnoreEpisodesWithoutFilesNil sets the value for IgnoreEpisodesWithoutFiles to be an explicit nil
func (o *SonarrSeriesAddOptionsInner) SetIgnoreEpisodesWithoutFilesNil() {
	o.IgnoreEpisodesWithoutFiles.Set(nil)
}

// UnsetIgnoreEpisodesWithoutFiles ensures that no value is present for IgnoreEpisodesWithoutFiles, not even an explicit nil
func (o *SonarrSeriesAddOptionsInner) UnsetIgnoreEpisodesWithoutFiles() {
	o.IgnoreEpisodesWithoutFiles.Unset()
}

// GetSearchForMissingEpisodes returns the SearchForMissingEpisodes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SonarrSeriesAddOptionsInner) GetSearchForMissingEpisodes() bool {
	if o == nil || IsNil(o.SearchForMissingEpisodes.Get()) {
		var ret bool
		return ret
	}
	return *o.SearchForMissingEpisodes.Get()
}

// GetSearchForMissingEpisodesOk returns a tuple with the SearchForMissingEpisodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SonarrSeriesAddOptionsInner) GetSearchForMissingEpisodesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SearchForMissingEpisodes.Get(), o.SearchForMissingEpisodes.IsSet()
}

// HasSearchForMissingEpisodes returns a boolean if a field has been set.
func (o *SonarrSeriesAddOptionsInner) HasSearchForMissingEpisodes() bool {
	if o != nil && o.SearchForMissingEpisodes.IsSet() {
		return true
	}

	return false
}

// SetSearchForMissingEpisodes gets a reference to the given NullableBool and assigns it to the SearchForMissingEpisodes field.
func (o *SonarrSeriesAddOptionsInner) SetSearchForMissingEpisodes(v bool) {
	o.SearchForMissingEpisodes.Set(&v)
}
// SetSearchForMissingEpisodesNil sets the value for SearchForMissingEpisodes to be an explicit nil
func (o *SonarrSeriesAddOptionsInner) SetSearchForMissingEpisodesNil() {
	o.SearchForMissingEpisodes.Set(nil)
}

// UnsetSearchForMissingEpisodes ensures that no value is present for SearchForMissingEpisodes, not even an explicit nil
func (o *SonarrSeriesAddOptionsInner) UnsetSearchForMissingEpisodes() {
	o.SearchForMissingEpisodes.Unset()
}

func (o SonarrSeriesAddOptionsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SonarrSeriesAddOptionsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.IgnoreEpisodesWithFiles.IsSet() {
		toSerialize["ignoreEpisodesWithFiles"] = o.IgnoreEpisodesWithFiles.Get()
	}
	if o.IgnoreEpisodesWithoutFiles.IsSet() {
		toSerialize["ignoreEpisodesWithoutFiles"] = o.IgnoreEpisodesWithoutFiles.Get()
	}
	if o.SearchForMissingEpisodes.IsSet() {
		toSerialize["searchForMissingEpisodes"] = o.SearchForMissingEpisodes.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SonarrSeriesAddOptionsInner) UnmarshalJSON(data []byte) (err error) {
	varSonarrSeriesAddOptionsInner := _SonarrSeriesAddOptionsInner{}

	err = json.Unmarshal(data, &varSonarrSeriesAddOptionsInner)

	if err != nil {
		return err
	}

	*o = SonarrSeriesAddOptionsInner(varSonarrSeriesAddOptionsInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ignoreEpisodesWithFiles")
		delete(additionalProperties, "ignoreEpisodesWithoutFiles")
		delete(additionalProperties, "searchForMissingEpisodes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSonarrSeriesAddOptionsInner struct {
	value *SonarrSeriesAddOptionsInner
	isSet bool
}

func (v NullableSonarrSeriesAddOptionsInner) Get() *SonarrSeriesAddOptionsInner {
	return v.value
}

func (v *NullableSonarrSeriesAddOptionsInner) Set(val *SonarrSeriesAddOptionsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSonarrSeriesAddOptionsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSonarrSeriesAddOptionsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSonarrSeriesAddOptionsInner(val *SonarrSeriesAddOptionsInner) *NullableSonarrSeriesAddOptionsInner {
	return &NullableSonarrSeriesAddOptionsInner{value: val, isSet: true}
}

func (v NullableSonarrSeriesAddOptionsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSonarrSeriesAddOptionsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


