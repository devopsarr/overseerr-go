/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr

import (
	"encoding/json"
)

// ListRegions200ResponseInner struct for ListRegions200ResponseInner
type ListRegions200ResponseInner struct {
	Iso31661 *string `json:"iso_3166_1,omitempty"`
	EnglishName *string `json:"english_name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ListRegions200ResponseInner ListRegions200ResponseInner

// NewListRegions200ResponseInner instantiates a new ListRegions200ResponseInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListRegions200ResponseInner() *ListRegions200ResponseInner {
	this := ListRegions200ResponseInner{}
	return &this
}

// NewListRegions200ResponseInnerWithDefaults instantiates a new ListRegions200ResponseInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListRegions200ResponseInnerWithDefaults() *ListRegions200ResponseInner {
	this := ListRegions200ResponseInner{}
	return &this
}

// GetIso31661 returns the Iso31661 field value if set, zero value otherwise.
func (o *ListRegions200ResponseInner) GetIso31661() string {
	if o == nil || isNil(o.Iso31661) {
		var ret string
		return ret
	}
	return *o.Iso31661
}

// GetIso31661Ok returns a tuple with the Iso31661 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListRegions200ResponseInner) GetIso31661Ok() (*string, bool) {
	if o == nil || isNil(o.Iso31661) {
    return nil, false
	}
	return o.Iso31661, true
}

// HasIso31661 returns a boolean if a field has been set.
func (o *ListRegions200ResponseInner) HasIso31661() bool {
	if o != nil && !isNil(o.Iso31661) {
		return true
	}

	return false
}

// SetIso31661 gets a reference to the given string and assigns it to the Iso31661 field.
func (o *ListRegions200ResponseInner) SetIso31661(v string) {
	o.Iso31661 = &v
}

// GetEnglishName returns the EnglishName field value if set, zero value otherwise.
func (o *ListRegions200ResponseInner) GetEnglishName() string {
	if o == nil || isNil(o.EnglishName) {
		var ret string
		return ret
	}
	return *o.EnglishName
}

// GetEnglishNameOk returns a tuple with the EnglishName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListRegions200ResponseInner) GetEnglishNameOk() (*string, bool) {
	if o == nil || isNil(o.EnglishName) {
    return nil, false
	}
	return o.EnglishName, true
}

// HasEnglishName returns a boolean if a field has been set.
func (o *ListRegions200ResponseInner) HasEnglishName() bool {
	if o != nil && !isNil(o.EnglishName) {
		return true
	}

	return false
}

// SetEnglishName gets a reference to the given string and assigns it to the EnglishName field.
func (o *ListRegions200ResponseInner) SetEnglishName(v string) {
	o.EnglishName = &v
}

func (o ListRegions200ResponseInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Iso31661) {
		toSerialize["iso_3166_1"] = o.Iso31661
	}
	if !isNil(o.EnglishName) {
		toSerialize["english_name"] = o.EnglishName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ListRegions200ResponseInner) UnmarshalJSON(bytes []byte) (err error) {
	varListRegions200ResponseInner := _ListRegions200ResponseInner{}

	if err = json.Unmarshal(bytes, &varListRegions200ResponseInner); err == nil {
		*o = ListRegions200ResponseInner(varListRegions200ResponseInner)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "iso_3166_1")
		delete(additionalProperties, "english_name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListRegions200ResponseInner struct {
	value *ListRegions200ResponseInner
	isSet bool
}

func (v NullableListRegions200ResponseInner) Get() *ListRegions200ResponseInner {
	return v.value
}

func (v *NullableListRegions200ResponseInner) Set(val *ListRegions200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListRegions200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListRegions200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRegions200ResponseInner(val *ListRegions200ResponseInner) *NullableListRegions200ResponseInner {
	return &NullableListRegions200ResponseInner{value: val, isSet: true}
}

func (v NullableListRegions200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRegions200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


