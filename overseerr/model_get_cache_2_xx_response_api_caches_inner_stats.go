/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: v1.33.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr

import (
	"encoding/json"
)

// GetCache2XXResponseApiCachesInnerStats struct for GetCache2XXResponseApiCachesInnerStats
type GetCache2XXResponseApiCachesInnerStats struct {
	Hits *float32 `json:"hits,omitempty"`
	Misses *float32 `json:"misses,omitempty"`
	Keys *float32 `json:"keys,omitempty"`
	Ksize *float32 `json:"ksize,omitempty"`
	Vsize *float32 `json:"vsize,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetCache2XXResponseApiCachesInnerStats GetCache2XXResponseApiCachesInnerStats

// NewGetCache2XXResponseApiCachesInnerStats instantiates a new GetCache2XXResponseApiCachesInnerStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetCache2XXResponseApiCachesInnerStats() *GetCache2XXResponseApiCachesInnerStats {
	this := GetCache2XXResponseApiCachesInnerStats{}
	return &this
}

// NewGetCache2XXResponseApiCachesInnerStatsWithDefaults instantiates a new GetCache2XXResponseApiCachesInnerStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetCache2XXResponseApiCachesInnerStatsWithDefaults() *GetCache2XXResponseApiCachesInnerStats {
	this := GetCache2XXResponseApiCachesInnerStats{}
	return &this
}

// GetHits returns the Hits field value if set, zero value otherwise.
func (o *GetCache2XXResponseApiCachesInnerStats) GetHits() float32 {
	if o == nil || isNil(o.Hits) {
		var ret float32
		return ret
	}
	return *o.Hits
}

// GetHitsOk returns a tuple with the Hits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCache2XXResponseApiCachesInnerStats) GetHitsOk() (*float32, bool) {
	if o == nil || isNil(o.Hits) {
    return nil, false
	}
	return o.Hits, true
}

// HasHits returns a boolean if a field has been set.
func (o *GetCache2XXResponseApiCachesInnerStats) HasHits() bool {
	if o != nil && !isNil(o.Hits) {
		return true
	}

	return false
}

// SetHits gets a reference to the given float32 and assigns it to the Hits field.
func (o *GetCache2XXResponseApiCachesInnerStats) SetHits(v float32) {
	o.Hits = &v
}

// GetMisses returns the Misses field value if set, zero value otherwise.
func (o *GetCache2XXResponseApiCachesInnerStats) GetMisses() float32 {
	if o == nil || isNil(o.Misses) {
		var ret float32
		return ret
	}
	return *o.Misses
}

// GetMissesOk returns a tuple with the Misses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCache2XXResponseApiCachesInnerStats) GetMissesOk() (*float32, bool) {
	if o == nil || isNil(o.Misses) {
    return nil, false
	}
	return o.Misses, true
}

// HasMisses returns a boolean if a field has been set.
func (o *GetCache2XXResponseApiCachesInnerStats) HasMisses() bool {
	if o != nil && !isNil(o.Misses) {
		return true
	}

	return false
}

// SetMisses gets a reference to the given float32 and assigns it to the Misses field.
func (o *GetCache2XXResponseApiCachesInnerStats) SetMisses(v float32) {
	o.Misses = &v
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *GetCache2XXResponseApiCachesInnerStats) GetKeys() float32 {
	if o == nil || isNil(o.Keys) {
		var ret float32
		return ret
	}
	return *o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCache2XXResponseApiCachesInnerStats) GetKeysOk() (*float32, bool) {
	if o == nil || isNil(o.Keys) {
    return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *GetCache2XXResponseApiCachesInnerStats) HasKeys() bool {
	if o != nil && !isNil(o.Keys) {
		return true
	}

	return false
}

// SetKeys gets a reference to the given float32 and assigns it to the Keys field.
func (o *GetCache2XXResponseApiCachesInnerStats) SetKeys(v float32) {
	o.Keys = &v
}

// GetKsize returns the Ksize field value if set, zero value otherwise.
func (o *GetCache2XXResponseApiCachesInnerStats) GetKsize() float32 {
	if o == nil || isNil(o.Ksize) {
		var ret float32
		return ret
	}
	return *o.Ksize
}

// GetKsizeOk returns a tuple with the Ksize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCache2XXResponseApiCachesInnerStats) GetKsizeOk() (*float32, bool) {
	if o == nil || isNil(o.Ksize) {
    return nil, false
	}
	return o.Ksize, true
}

// HasKsize returns a boolean if a field has been set.
func (o *GetCache2XXResponseApiCachesInnerStats) HasKsize() bool {
	if o != nil && !isNil(o.Ksize) {
		return true
	}

	return false
}

// SetKsize gets a reference to the given float32 and assigns it to the Ksize field.
func (o *GetCache2XXResponseApiCachesInnerStats) SetKsize(v float32) {
	o.Ksize = &v
}

// GetVsize returns the Vsize field value if set, zero value otherwise.
func (o *GetCache2XXResponseApiCachesInnerStats) GetVsize() float32 {
	if o == nil || isNil(o.Vsize) {
		var ret float32
		return ret
	}
	return *o.Vsize
}

// GetVsizeOk returns a tuple with the Vsize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCache2XXResponseApiCachesInnerStats) GetVsizeOk() (*float32, bool) {
	if o == nil || isNil(o.Vsize) {
    return nil, false
	}
	return o.Vsize, true
}

// HasVsize returns a boolean if a field has been set.
func (o *GetCache2XXResponseApiCachesInnerStats) HasVsize() bool {
	if o != nil && !isNil(o.Vsize) {
		return true
	}

	return false
}

// SetVsize gets a reference to the given float32 and assigns it to the Vsize field.
func (o *GetCache2XXResponseApiCachesInnerStats) SetVsize(v float32) {
	o.Vsize = &v
}

func (o GetCache2XXResponseApiCachesInnerStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Hits) {
		toSerialize["hits"] = o.Hits
	}
	if !isNil(o.Misses) {
		toSerialize["misses"] = o.Misses
	}
	if !isNil(o.Keys) {
		toSerialize["keys"] = o.Keys
	}
	if !isNil(o.Ksize) {
		toSerialize["ksize"] = o.Ksize
	}
	if !isNil(o.Vsize) {
		toSerialize["vsize"] = o.Vsize
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *GetCache2XXResponseApiCachesInnerStats) UnmarshalJSON(bytes []byte) (err error) {
	varGetCache2XXResponseApiCachesInnerStats := _GetCache2XXResponseApiCachesInnerStats{}

	if err = json.Unmarshal(bytes, &varGetCache2XXResponseApiCachesInnerStats); err == nil {
		*o = GetCache2XXResponseApiCachesInnerStats(varGetCache2XXResponseApiCachesInnerStats)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "hits")
		delete(additionalProperties, "misses")
		delete(additionalProperties, "keys")
		delete(additionalProperties, "ksize")
		delete(additionalProperties, "vsize")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetCache2XXResponseApiCachesInnerStats struct {
	value *GetCache2XXResponseApiCachesInnerStats
	isSet bool
}

func (v NullableGetCache2XXResponseApiCachesInnerStats) Get() *GetCache2XXResponseApiCachesInnerStats {
	return v.value
}

func (v *NullableGetCache2XXResponseApiCachesInnerStats) Set(val *GetCache2XXResponseApiCachesInnerStats) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCache2XXResponseApiCachesInnerStats) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCache2XXResponseApiCachesInnerStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCache2XXResponseApiCachesInnerStats(val *GetCache2XXResponseApiCachesInnerStats) *NullableGetCache2XXResponseApiCachesInnerStats {
	return &NullableGetCache2XXResponseApiCachesInnerStats{value: val, isSet: true}
}

func (v NullableGetCache2XXResponseApiCachesInnerStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCache2XXResponseApiCachesInnerStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


