/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr

import (
	"encoding/json"
)

// UserSettings struct for UserSettings
type UserSettings struct {
	Locale *string `json:"locale,omitempty"`
	Region *string `json:"region,omitempty"`
	OriginalLanguage *string `json:"originalLanguage,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserSettings UserSettings

// NewUserSettings instantiates a new UserSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSettings() *UserSettings {
	this := UserSettings{}
	return &this
}

// NewUserSettingsWithDefaults instantiates a new UserSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSettingsWithDefaults() *UserSettings {
	this := UserSettings{}
	return &this
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *UserSettings) GetLocale() string {
	if o == nil || isNil(o.Locale) {
		var ret string
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetLocaleOk() (*string, bool) {
	if o == nil || isNil(o.Locale) {
    return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *UserSettings) HasLocale() bool {
	if o != nil && !isNil(o.Locale) {
		return true
	}

	return false
}

// SetLocale gets a reference to the given string and assigns it to the Locale field.
func (o *UserSettings) SetLocale(v string) {
	o.Locale = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *UserSettings) GetRegion() string {
	if o == nil || isNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetRegionOk() (*string, bool) {
	if o == nil || isNil(o.Region) {
    return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *UserSettings) HasRegion() bool {
	if o != nil && !isNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *UserSettings) SetRegion(v string) {
	o.Region = &v
}

// GetOriginalLanguage returns the OriginalLanguage field value if set, zero value otherwise.
func (o *UserSettings) GetOriginalLanguage() string {
	if o == nil || isNil(o.OriginalLanguage) {
		var ret string
		return ret
	}
	return *o.OriginalLanguage
}

// GetOriginalLanguageOk returns a tuple with the OriginalLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetOriginalLanguageOk() (*string, bool) {
	if o == nil || isNil(o.OriginalLanguage) {
    return nil, false
	}
	return o.OriginalLanguage, true
}

// HasOriginalLanguage returns a boolean if a field has been set.
func (o *UserSettings) HasOriginalLanguage() bool {
	if o != nil && !isNil(o.OriginalLanguage) {
		return true
	}

	return false
}

// SetOriginalLanguage gets a reference to the given string and assigns it to the OriginalLanguage field.
func (o *UserSettings) SetOriginalLanguage(v string) {
	o.OriginalLanguage = &v
}

func (o UserSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Locale) {
		toSerialize["locale"] = o.Locale
	}
	if !isNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !isNil(o.OriginalLanguage) {
		toSerialize["originalLanguage"] = o.OriginalLanguage
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *UserSettings) UnmarshalJSON(bytes []byte) (err error) {
	varUserSettings := _UserSettings{}

	if err = json.Unmarshal(bytes, &varUserSettings); err == nil {
		*o = UserSettings(varUserSettings)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "locale")
		delete(additionalProperties, "region")
		delete(additionalProperties, "originalLanguage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserSettings struct {
	value *UserSettings
	isSet bool
}

func (v NullableUserSettings) Get() *UserSettings {
	return v.value
}

func (v *NullableUserSettings) Set(val *UserSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSettings(val *UserSettings) *NullableUserSettings {
	return &NullableUserSettings{value: val, isSet: true}
}

func (v NullableUserSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


