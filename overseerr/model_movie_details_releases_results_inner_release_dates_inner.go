/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr

import (
	"encoding/json"
)

// MovieDetailsReleasesResultsInnerReleaseDatesInner struct for MovieDetailsReleasesResultsInnerReleaseDatesInner
type MovieDetailsReleasesResultsInnerReleaseDatesInner struct {
	Certification *string `json:"certification,omitempty"`
	Iso6391 NullableString `json:"iso_639_1,omitempty"`
	Note NullableString `json:"note,omitempty"`
	ReleaseDate *string `json:"release_date,omitempty"`
	Type *float32 `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MovieDetailsReleasesResultsInnerReleaseDatesInner MovieDetailsReleasesResultsInnerReleaseDatesInner

// NewMovieDetailsReleasesResultsInnerReleaseDatesInner instantiates a new MovieDetailsReleasesResultsInnerReleaseDatesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMovieDetailsReleasesResultsInnerReleaseDatesInner() *MovieDetailsReleasesResultsInnerReleaseDatesInner {
	this := MovieDetailsReleasesResultsInnerReleaseDatesInner{}
	return &this
}

// NewMovieDetailsReleasesResultsInnerReleaseDatesInnerWithDefaults instantiates a new MovieDetailsReleasesResultsInnerReleaseDatesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMovieDetailsReleasesResultsInnerReleaseDatesInnerWithDefaults() *MovieDetailsReleasesResultsInnerReleaseDatesInner {
	this := MovieDetailsReleasesResultsInnerReleaseDatesInner{}
	return &this
}

// GetCertification returns the Certification field value if set, zero value otherwise.
func (o *MovieDetailsReleasesResultsInnerReleaseDatesInner) GetCertification() string {
	if o == nil || isNil(o.Certification) {
		var ret string
		return ret
	}
	return *o.Certification
}

// GetCertificationOk returns a tuple with the Certification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieDetailsReleasesResultsInnerReleaseDatesInner) GetCertificationOk() (*string, bool) {
	if o == nil || isNil(o.Certification) {
    return nil, false
	}
	return o.Certification, true
}

// HasCertification returns a boolean if a field has been set.
func (o *MovieDetailsReleasesResultsInnerReleaseDatesInner) HasCertification() bool {
	if o != nil && !isNil(o.Certification) {
		return true
	}

	return false
}

// SetCertification gets a reference to the given string and assigns it to the Certification field.
func (o *MovieDetailsReleasesResultsInnerReleaseDatesInner) SetCertification(v string) {
	o.Certification = &v
}

// GetIso6391 returns the Iso6391 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieDetailsReleasesResultsInnerReleaseDatesInner) GetIso6391() string {
	if o == nil || isNil(o.Iso6391.Get()) {
		var ret string
		return ret
	}
	return *o.Iso6391.Get()
}

// GetIso6391Ok returns a tuple with the Iso6391 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieDetailsReleasesResultsInnerReleaseDatesInner) GetIso6391Ok() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Iso6391.Get(), o.Iso6391.IsSet()
}

// HasIso6391 returns a boolean if a field has been set.
func (o *MovieDetailsReleasesResultsInnerReleaseDatesInner) HasIso6391() bool {
	if o != nil && o.Iso6391.IsSet() {
		return true
	}

	return false
}

// SetIso6391 gets a reference to the given NullableString and assigns it to the Iso6391 field.
func (o *MovieDetailsReleasesResultsInnerReleaseDatesInner) SetIso6391(v string) {
	o.Iso6391.Set(&v)
}
// SetIso6391Nil sets the value for Iso6391 to be an explicit nil
func (o *MovieDetailsReleasesResultsInnerReleaseDatesInner) SetIso6391Nil() {
	o.Iso6391.Set(nil)
}

// UnsetIso6391 ensures that no value is present for Iso6391, not even an explicit nil
func (o *MovieDetailsReleasesResultsInnerReleaseDatesInner) UnsetIso6391() {
	o.Iso6391.Unset()
}

// GetNote returns the Note field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieDetailsReleasesResultsInnerReleaseDatesInner) GetNote() string {
	if o == nil || isNil(o.Note.Get()) {
		var ret string
		return ret
	}
	return *o.Note.Get()
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieDetailsReleasesResultsInnerReleaseDatesInner) GetNoteOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Note.Get(), o.Note.IsSet()
}

// HasNote returns a boolean if a field has been set.
func (o *MovieDetailsReleasesResultsInnerReleaseDatesInner) HasNote() bool {
	if o != nil && o.Note.IsSet() {
		return true
	}

	return false
}

// SetNote gets a reference to the given NullableString and assigns it to the Note field.
func (o *MovieDetailsReleasesResultsInnerReleaseDatesInner) SetNote(v string) {
	o.Note.Set(&v)
}
// SetNoteNil sets the value for Note to be an explicit nil
func (o *MovieDetailsReleasesResultsInnerReleaseDatesInner) SetNoteNil() {
	o.Note.Set(nil)
}

// UnsetNote ensures that no value is present for Note, not even an explicit nil
func (o *MovieDetailsReleasesResultsInnerReleaseDatesInner) UnsetNote() {
	o.Note.Unset()
}

// GetReleaseDate returns the ReleaseDate field value if set, zero value otherwise.
func (o *MovieDetailsReleasesResultsInnerReleaseDatesInner) GetReleaseDate() string {
	if o == nil || isNil(o.ReleaseDate) {
		var ret string
		return ret
	}
	return *o.ReleaseDate
}

// GetReleaseDateOk returns a tuple with the ReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieDetailsReleasesResultsInnerReleaseDatesInner) GetReleaseDateOk() (*string, bool) {
	if o == nil || isNil(o.ReleaseDate) {
    return nil, false
	}
	return o.ReleaseDate, true
}

// HasReleaseDate returns a boolean if a field has been set.
func (o *MovieDetailsReleasesResultsInnerReleaseDatesInner) HasReleaseDate() bool {
	if o != nil && !isNil(o.ReleaseDate) {
		return true
	}

	return false
}

// SetReleaseDate gets a reference to the given string and assigns it to the ReleaseDate field.
func (o *MovieDetailsReleasesResultsInnerReleaseDatesInner) SetReleaseDate(v string) {
	o.ReleaseDate = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MovieDetailsReleasesResultsInnerReleaseDatesInner) GetType() float32 {
	if o == nil || isNil(o.Type) {
		var ret float32
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieDetailsReleasesResultsInnerReleaseDatesInner) GetTypeOk() (*float32, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MovieDetailsReleasesResultsInnerReleaseDatesInner) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given float32 and assigns it to the Type field.
func (o *MovieDetailsReleasesResultsInnerReleaseDatesInner) SetType(v float32) {
	o.Type = &v
}

func (o MovieDetailsReleasesResultsInnerReleaseDatesInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Certification) {
		toSerialize["certification"] = o.Certification
	}
	if o.Iso6391.IsSet() {
		toSerialize["iso_639_1"] = o.Iso6391.Get()
	}
	if o.Note.IsSet() {
		toSerialize["note"] = o.Note.Get()
	}
	if !isNil(o.ReleaseDate) {
		toSerialize["release_date"] = o.ReleaseDate
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *MovieDetailsReleasesResultsInnerReleaseDatesInner) UnmarshalJSON(bytes []byte) (err error) {
	varMovieDetailsReleasesResultsInnerReleaseDatesInner := _MovieDetailsReleasesResultsInnerReleaseDatesInner{}

	if err = json.Unmarshal(bytes, &varMovieDetailsReleasesResultsInnerReleaseDatesInner); err == nil {
		*o = MovieDetailsReleasesResultsInnerReleaseDatesInner(varMovieDetailsReleasesResultsInnerReleaseDatesInner)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "certification")
		delete(additionalProperties, "iso_639_1")
		delete(additionalProperties, "note")
		delete(additionalProperties, "release_date")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMovieDetailsReleasesResultsInnerReleaseDatesInner struct {
	value *MovieDetailsReleasesResultsInnerReleaseDatesInner
	isSet bool
}

func (v NullableMovieDetailsReleasesResultsInnerReleaseDatesInner) Get() *MovieDetailsReleasesResultsInnerReleaseDatesInner {
	return v.value
}

func (v *NullableMovieDetailsReleasesResultsInnerReleaseDatesInner) Set(val *MovieDetailsReleasesResultsInnerReleaseDatesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableMovieDetailsReleasesResultsInnerReleaseDatesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableMovieDetailsReleasesResultsInnerReleaseDatesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMovieDetailsReleasesResultsInnerReleaseDatesInner(val *MovieDetailsReleasesResultsInnerReleaseDatesInner) *NullableMovieDetailsReleasesResultsInnerReleaseDatesInner {
	return &NullableMovieDetailsReleasesResultsInnerReleaseDatesInner{value: val, isSet: true}
}

func (v NullableMovieDetailsReleasesResultsInnerReleaseDatesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMovieDetailsReleasesResultsInnerReleaseDatesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


