/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: v1.33.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr

import (
	"encoding/json"
	"fmt"
)

// CreateAuthLocalRequest struct for CreateAuthLocalRequest
type CreateAuthLocalRequest struct {
	Email string `json:"email"`
	Password string `json:"password"`
	AdditionalProperties map[string]interface{}
}

type _CreateAuthLocalRequest CreateAuthLocalRequest

// NewCreateAuthLocalRequest instantiates a new CreateAuthLocalRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateAuthLocalRequest(email string, password string) *CreateAuthLocalRequest {
	this := CreateAuthLocalRequest{}
	this.Email = email
	this.Password = password
	return &this
}

// NewCreateAuthLocalRequestWithDefaults instantiates a new CreateAuthLocalRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateAuthLocalRequestWithDefaults() *CreateAuthLocalRequest {
	this := CreateAuthLocalRequest{}
	return &this
}

// GetEmail returns the Email field value
func (o *CreateAuthLocalRequest) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *CreateAuthLocalRequest) GetEmailOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *CreateAuthLocalRequest) SetEmail(v string) {
	o.Email = v
}

// GetPassword returns the Password field value
func (o *CreateAuthLocalRequest) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *CreateAuthLocalRequest) GetPasswordOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *CreateAuthLocalRequest) SetPassword(v string) {
	o.Password = v
}

func (o CreateAuthLocalRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["email"] = o.Email
	}
	if true {
		toSerialize["password"] = o.Password
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CreateAuthLocalRequest) UnmarshalJSON(bytes []byte) (err error) {
	varCreateAuthLocalRequest := _CreateAuthLocalRequest{}

	if err = json.Unmarshal(bytes, &varCreateAuthLocalRequest); err == nil {
		*o = CreateAuthLocalRequest(varCreateAuthLocalRequest)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "email")
		delete(additionalProperties, "password")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateAuthLocalRequest struct {
	value *CreateAuthLocalRequest
	isSet bool
}

func (v NullableCreateAuthLocalRequest) Get() *CreateAuthLocalRequest {
	return v.value
}

func (v *NullableCreateAuthLocalRequest) Set(val *CreateAuthLocalRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAuthLocalRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAuthLocalRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAuthLocalRequest(val *CreateAuthLocalRequest) *NullableCreateAuthLocalRequest {
	return &NullableCreateAuthLocalRequest{value: val, isSet: true}
}

func (v NullableCreateAuthLocalRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAuthLocalRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


