/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr

import (
	"encoding/json"
)

// WatchProviderRegion struct for WatchProviderRegion
type WatchProviderRegion struct {
	Iso31661 *string `json:"iso_3166_1,omitempty"`
	EnglishName *string `json:"english_name,omitempty"`
	NativeName *string `json:"native_name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WatchProviderRegion WatchProviderRegion

// NewWatchProviderRegion instantiates a new WatchProviderRegion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWatchProviderRegion() *WatchProviderRegion {
	this := WatchProviderRegion{}
	return &this
}

// NewWatchProviderRegionWithDefaults instantiates a new WatchProviderRegion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWatchProviderRegionWithDefaults() *WatchProviderRegion {
	this := WatchProviderRegion{}
	return &this
}

// GetIso31661 returns the Iso31661 field value if set, zero value otherwise.
func (o *WatchProviderRegion) GetIso31661() string {
	if o == nil || isNil(o.Iso31661) {
		var ret string
		return ret
	}
	return *o.Iso31661
}

// GetIso31661Ok returns a tuple with the Iso31661 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchProviderRegion) GetIso31661Ok() (*string, bool) {
	if o == nil || isNil(o.Iso31661) {
    return nil, false
	}
	return o.Iso31661, true
}

// HasIso31661 returns a boolean if a field has been set.
func (o *WatchProviderRegion) HasIso31661() bool {
	if o != nil && !isNil(o.Iso31661) {
		return true
	}

	return false
}

// SetIso31661 gets a reference to the given string and assigns it to the Iso31661 field.
func (o *WatchProviderRegion) SetIso31661(v string) {
	o.Iso31661 = &v
}

// GetEnglishName returns the EnglishName field value if set, zero value otherwise.
func (o *WatchProviderRegion) GetEnglishName() string {
	if o == nil || isNil(o.EnglishName) {
		var ret string
		return ret
	}
	return *o.EnglishName
}

// GetEnglishNameOk returns a tuple with the EnglishName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchProviderRegion) GetEnglishNameOk() (*string, bool) {
	if o == nil || isNil(o.EnglishName) {
    return nil, false
	}
	return o.EnglishName, true
}

// HasEnglishName returns a boolean if a field has been set.
func (o *WatchProviderRegion) HasEnglishName() bool {
	if o != nil && !isNil(o.EnglishName) {
		return true
	}

	return false
}

// SetEnglishName gets a reference to the given string and assigns it to the EnglishName field.
func (o *WatchProviderRegion) SetEnglishName(v string) {
	o.EnglishName = &v
}

// GetNativeName returns the NativeName field value if set, zero value otherwise.
func (o *WatchProviderRegion) GetNativeName() string {
	if o == nil || isNil(o.NativeName) {
		var ret string
		return ret
	}
	return *o.NativeName
}

// GetNativeNameOk returns a tuple with the NativeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchProviderRegion) GetNativeNameOk() (*string, bool) {
	if o == nil || isNil(o.NativeName) {
    return nil, false
	}
	return o.NativeName, true
}

// HasNativeName returns a boolean if a field has been set.
func (o *WatchProviderRegion) HasNativeName() bool {
	if o != nil && !isNil(o.NativeName) {
		return true
	}

	return false
}

// SetNativeName gets a reference to the given string and assigns it to the NativeName field.
func (o *WatchProviderRegion) SetNativeName(v string) {
	o.NativeName = &v
}

func (o WatchProviderRegion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Iso31661) {
		toSerialize["iso_3166_1"] = o.Iso31661
	}
	if !isNil(o.EnglishName) {
		toSerialize["english_name"] = o.EnglishName
	}
	if !isNil(o.NativeName) {
		toSerialize["native_name"] = o.NativeName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *WatchProviderRegion) UnmarshalJSON(bytes []byte) (err error) {
	varWatchProviderRegion := _WatchProviderRegion{}

	if err = json.Unmarshal(bytes, &varWatchProviderRegion); err == nil {
		*o = WatchProviderRegion(varWatchProviderRegion)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "iso_3166_1")
		delete(additionalProperties, "english_name")
		delete(additionalProperties, "native_name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWatchProviderRegion struct {
	value *WatchProviderRegion
	isSet bool
}

func (v NullableWatchProviderRegion) Get() *WatchProviderRegion {
	return v.value
}

func (v *NullableWatchProviderRegion) Set(val *WatchProviderRegion) {
	v.value = val
	v.isSet = true
}

func (v NullableWatchProviderRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableWatchProviderRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWatchProviderRegion(val *WatchProviderRegion) *NullableWatchProviderRegion {
	return &NullableWatchProviderRegion{value: val, isSet: true}
}

func (v NullableWatchProviderRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWatchProviderRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


