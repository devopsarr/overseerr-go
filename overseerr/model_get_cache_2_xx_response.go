/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr

import (
	"encoding/json"
)

// GetCache2XXResponse struct for GetCache2XXResponse
type GetCache2XXResponse struct {
	ImageCache *GetCache2XXResponseImageCache `json:"imageCache,omitempty"`
	ApiCaches []*GetCache2XXResponseApiCachesInner `json:"apiCaches,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetCache2XXResponse GetCache2XXResponse

// NewGetCache2XXResponse instantiates a new GetCache2XXResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetCache2XXResponse() *GetCache2XXResponse {
	this := GetCache2XXResponse{}
	return &this
}

// NewGetCache2XXResponseWithDefaults instantiates a new GetCache2XXResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetCache2XXResponseWithDefaults() *GetCache2XXResponse {
	this := GetCache2XXResponse{}
	return &this
}

// GetImageCache returns the ImageCache field value if set, zero value otherwise.
func (o *GetCache2XXResponse) GetImageCache() GetCache2XXResponseImageCache {
	if o == nil || isNil(o.ImageCache) {
		var ret GetCache2XXResponseImageCache
		return ret
	}
	return *o.ImageCache
}

// GetImageCacheOk returns a tuple with the ImageCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCache2XXResponse) GetImageCacheOk() (*GetCache2XXResponseImageCache, bool) {
	if o == nil || isNil(o.ImageCache) {
    return nil, false
	}
	return o.ImageCache, true
}

// HasImageCache returns a boolean if a field has been set.
func (o *GetCache2XXResponse) HasImageCache() bool {
	if o != nil && !isNil(o.ImageCache) {
		return true
	}

	return false
}

// SetImageCache gets a reference to the given GetCache2XXResponseImageCache and assigns it to the ImageCache field.
func (o *GetCache2XXResponse) SetImageCache(v GetCache2XXResponseImageCache) {
	o.ImageCache = &v
}

// GetApiCaches returns the ApiCaches field value if set, zero value otherwise.
func (o *GetCache2XXResponse) GetApiCaches() []*GetCache2XXResponseApiCachesInner {
	if o == nil || isNil(o.ApiCaches) {
		var ret []*GetCache2XXResponseApiCachesInner
		return ret
	}
	return o.ApiCaches
}

// GetApiCachesOk returns a tuple with the ApiCaches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCache2XXResponse) GetApiCachesOk() ([]*GetCache2XXResponseApiCachesInner, bool) {
	if o == nil || isNil(o.ApiCaches) {
    return nil, false
	}
	return o.ApiCaches, true
}

// HasApiCaches returns a boolean if a field has been set.
func (o *GetCache2XXResponse) HasApiCaches() bool {
	if o != nil && !isNil(o.ApiCaches) {
		return true
	}

	return false
}

// SetApiCaches gets a reference to the given []GetCache2XXResponseApiCachesInner and assigns it to the ApiCaches field.
func (o *GetCache2XXResponse) SetApiCaches(v []*GetCache2XXResponseApiCachesInner) {
	o.ApiCaches = v
}

func (o GetCache2XXResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ImageCache) {
		toSerialize["imageCache"] = o.ImageCache
	}
	if !isNil(o.ApiCaches) {
		toSerialize["apiCaches"] = o.ApiCaches
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *GetCache2XXResponse) UnmarshalJSON(bytes []byte) (err error) {
	varGetCache2XXResponse := _GetCache2XXResponse{}

	if err = json.Unmarshal(bytes, &varGetCache2XXResponse); err == nil {
		*o = GetCache2XXResponse(varGetCache2XXResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "imageCache")
		delete(additionalProperties, "apiCaches")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetCache2XXResponse struct {
	value *GetCache2XXResponse
	isSet bool
}

func (v NullableGetCache2XXResponse) Get() *GetCache2XXResponse {
	return v.value
}

func (v *NullableGetCache2XXResponse) Set(val *GetCache2XXResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCache2XXResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCache2XXResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCache2XXResponse(val *GetCache2XXResponse) *NullableGetCache2XXResponse {
	return &NullableGetCache2XXResponse{value: val, isSet: true}
}

func (v NullableGetCache2XXResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCache2XXResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


