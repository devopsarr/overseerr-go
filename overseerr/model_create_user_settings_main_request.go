/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr

import (
	"encoding/json"
)

// CreateUserSettingsMainRequest struct for CreateUserSettingsMainRequest
type CreateUserSettingsMainRequest struct {
	Username NullableString `json:"username,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateUserSettingsMainRequest CreateUserSettingsMainRequest

// NewCreateUserSettingsMainRequest instantiates a new CreateUserSettingsMainRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUserSettingsMainRequest() *CreateUserSettingsMainRequest {
	this := CreateUserSettingsMainRequest{}
	return &this
}

// NewCreateUserSettingsMainRequestWithDefaults instantiates a new CreateUserSettingsMainRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUserSettingsMainRequestWithDefaults() *CreateUserSettingsMainRequest {
	this := CreateUserSettingsMainRequest{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUserSettingsMainRequest) GetUsername() string {
	if o == nil || isNil(o.Username.Get()) {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserSettingsMainRequest) GetUsernameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *CreateUserSettingsMainRequest) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *CreateUserSettingsMainRequest) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *CreateUserSettingsMainRequest) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *CreateUserSettingsMainRequest) UnsetUsername() {
	o.Username.Unset()
}

func (o CreateUserSettingsMainRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CreateUserSettingsMainRequest) UnmarshalJSON(bytes []byte) (err error) {
	varCreateUserSettingsMainRequest := _CreateUserSettingsMainRequest{}

	if err = json.Unmarshal(bytes, &varCreateUserSettingsMainRequest); err == nil {
		*o = CreateUserSettingsMainRequest(varCreateUserSettingsMainRequest)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "username")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateUserSettingsMainRequest struct {
	value *CreateUserSettingsMainRequest
	isSet bool
}

func (v NullableCreateUserSettingsMainRequest) Get() *CreateUserSettingsMainRequest {
	return v.value
}

func (v *NullableCreateUserSettingsMainRequest) Set(val *CreateUserSettingsMainRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUserSettingsMainRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUserSettingsMainRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUserSettingsMainRequest(val *CreateUserSettingsMainRequest) *NullableCreateUserSettingsMainRequest {
	return &NullableCreateUserSettingsMainRequest{value: val, isSet: true}
}

func (v NullableCreateUserSettingsMainRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUserSettingsMainRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


