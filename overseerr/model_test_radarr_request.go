/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr

import (
	"encoding/json"
)

// TestRadarrRequest struct for TestRadarrRequest
type TestRadarrRequest struct {
	Hostname string `json:"hostname"`
	Port float32 `json:"port"`
	ApiKey string `json:"apiKey"`
	UseSsl bool `json:"useSsl"`
	BaseUrl *string `json:"baseUrl,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TestRadarrRequest TestRadarrRequest

// NewTestRadarrRequest instantiates a new TestRadarrRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestRadarrRequest(hostname string, port float32, apiKey string, useSsl bool) *TestRadarrRequest {
	this := TestRadarrRequest{}
	this.Hostname = hostname
	this.Port = port
	this.ApiKey = apiKey
	this.UseSsl = useSsl
	return &this
}

// NewTestRadarrRequestWithDefaults instantiates a new TestRadarrRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestRadarrRequestWithDefaults() *TestRadarrRequest {
	this := TestRadarrRequest{}
	return &this
}

// GetHostname returns the Hostname field value
func (o *TestRadarrRequest) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *TestRadarrRequest) GetHostnameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *TestRadarrRequest) SetHostname(v string) {
	o.Hostname = v
}

// GetPort returns the Port field value
func (o *TestRadarrRequest) GetPort() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *TestRadarrRequest) GetPortOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *TestRadarrRequest) SetPort(v float32) {
	o.Port = v
}

// GetApiKey returns the ApiKey field value
func (o *TestRadarrRequest) GetApiKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value
// and a boolean to check if the value has been set.
func (o *TestRadarrRequest) GetApiKeyOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ApiKey, true
}

// SetApiKey sets field value
func (o *TestRadarrRequest) SetApiKey(v string) {
	o.ApiKey = v
}

// GetUseSsl returns the UseSsl field value
func (o *TestRadarrRequest) GetUseSsl() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UseSsl
}

// GetUseSslOk returns a tuple with the UseSsl field value
// and a boolean to check if the value has been set.
func (o *TestRadarrRequest) GetUseSslOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.UseSsl, true
}

// SetUseSsl sets field value
func (o *TestRadarrRequest) SetUseSsl(v bool) {
	o.UseSsl = v
}

// GetBaseUrl returns the BaseUrl field value if set, zero value otherwise.
func (o *TestRadarrRequest) GetBaseUrl() string {
	if o == nil || isNil(o.BaseUrl) {
		var ret string
		return ret
	}
	return *o.BaseUrl
}

// GetBaseUrlOk returns a tuple with the BaseUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRadarrRequest) GetBaseUrlOk() (*string, bool) {
	if o == nil || isNil(o.BaseUrl) {
    return nil, false
	}
	return o.BaseUrl, true
}

// HasBaseUrl returns a boolean if a field has been set.
func (o *TestRadarrRequest) HasBaseUrl() bool {
	if o != nil && !isNil(o.BaseUrl) {
		return true
	}

	return false
}

// SetBaseUrl gets a reference to the given string and assigns it to the BaseUrl field.
func (o *TestRadarrRequest) SetBaseUrl(v string) {
	o.BaseUrl = &v
}

func (o TestRadarrRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["hostname"] = o.Hostname
	}
	if true {
		toSerialize["port"] = o.Port
	}
	if true {
		toSerialize["apiKey"] = o.ApiKey
	}
	if true {
		toSerialize["useSsl"] = o.UseSsl
	}
	if !isNil(o.BaseUrl) {
		toSerialize["baseUrl"] = o.BaseUrl
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TestRadarrRequest) UnmarshalJSON(bytes []byte) (err error) {
	varTestRadarrRequest := _TestRadarrRequest{}

	if err = json.Unmarshal(bytes, &varTestRadarrRequest); err == nil {
		*o = TestRadarrRequest(varTestRadarrRequest)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "hostname")
		delete(additionalProperties, "port")
		delete(additionalProperties, "apiKey")
		delete(additionalProperties, "useSsl")
		delete(additionalProperties, "baseUrl")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTestRadarrRequest struct {
	value *TestRadarrRequest
	isSet bool
}

func (v NullableTestRadarrRequest) Get() *TestRadarrRequest {
	return v.value
}

func (v *NullableTestRadarrRequest) Set(val *TestRadarrRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTestRadarrRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTestRadarrRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestRadarrRequest(val *TestRadarrRequest) *NullableTestRadarrRequest {
	return &NullableTestRadarrRequest{value: val, isSet: true}
}

func (v NullableTestRadarrRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestRadarrRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


