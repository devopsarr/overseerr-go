/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr

import (
	"encoding/json"
)

// Issue struct for Issue
type Issue struct {
	Id *float32 `json:"id,omitempty"`
	IssueType *float32 `json:"issueType,omitempty"`
	Media *MediaInfo `json:"media,omitempty"`
	CreatedBy *User `json:"createdBy,omitempty"`
	ModifiedBy *User `json:"modifiedBy,omitempty"`
	Comments []*IssueComment `json:"comments,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Issue Issue

// NewIssue instantiates a new Issue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssue() *Issue {
	this := Issue{}
	return &this
}

// NewIssueWithDefaults instantiates a new Issue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueWithDefaults() *Issue {
	this := Issue{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Issue) GetId() float32 {
	if o == nil || isNil(o.Id) {
		var ret float32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetIdOk() (*float32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Issue) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *Issue) SetId(v float32) {
	o.Id = &v
}

// GetIssueType returns the IssueType field value if set, zero value otherwise.
func (o *Issue) GetIssueType() float32 {
	if o == nil || isNil(o.IssueType) {
		var ret float32
		return ret
	}
	return *o.IssueType
}

// GetIssueTypeOk returns a tuple with the IssueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetIssueTypeOk() (*float32, bool) {
	if o == nil || isNil(o.IssueType) {
    return nil, false
	}
	return o.IssueType, true
}

// HasIssueType returns a boolean if a field has been set.
func (o *Issue) HasIssueType() bool {
	if o != nil && !isNil(o.IssueType) {
		return true
	}

	return false
}

// SetIssueType gets a reference to the given float32 and assigns it to the IssueType field.
func (o *Issue) SetIssueType(v float32) {
	o.IssueType = &v
}

// GetMedia returns the Media field value if set, zero value otherwise.
func (o *Issue) GetMedia() MediaInfo {
	if o == nil || isNil(o.Media) {
		var ret MediaInfo
		return ret
	}
	return *o.Media
}

// GetMediaOk returns a tuple with the Media field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetMediaOk() (*MediaInfo, bool) {
	if o == nil || isNil(o.Media) {
    return nil, false
	}
	return o.Media, true
}

// HasMedia returns a boolean if a field has been set.
func (o *Issue) HasMedia() bool {
	if o != nil && !isNil(o.Media) {
		return true
	}

	return false
}

// SetMedia gets a reference to the given MediaInfo and assigns it to the Media field.
func (o *Issue) SetMedia(v MediaInfo) {
	o.Media = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *Issue) GetCreatedBy() User {
	if o == nil || isNil(o.CreatedBy) {
		var ret User
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetCreatedByOk() (*User, bool) {
	if o == nil || isNil(o.CreatedBy) {
    return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *Issue) HasCreatedBy() bool {
	if o != nil && !isNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given User and assigns it to the CreatedBy field.
func (o *Issue) SetCreatedBy(v User) {
	o.CreatedBy = &v
}

// GetModifiedBy returns the ModifiedBy field value if set, zero value otherwise.
func (o *Issue) GetModifiedBy() User {
	if o == nil || isNil(o.ModifiedBy) {
		var ret User
		return ret
	}
	return *o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetModifiedByOk() (*User, bool) {
	if o == nil || isNil(o.ModifiedBy) {
    return nil, false
	}
	return o.ModifiedBy, true
}

// HasModifiedBy returns a boolean if a field has been set.
func (o *Issue) HasModifiedBy() bool {
	if o != nil && !isNil(o.ModifiedBy) {
		return true
	}

	return false
}

// SetModifiedBy gets a reference to the given User and assigns it to the ModifiedBy field.
func (o *Issue) SetModifiedBy(v User) {
	o.ModifiedBy = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *Issue) GetComments() []*IssueComment {
	if o == nil || isNil(o.Comments) {
		var ret []*IssueComment
		return ret
	}
	return o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetCommentsOk() ([]*IssueComment, bool) {
	if o == nil || isNil(o.Comments) {
    return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *Issue) HasComments() bool {
	if o != nil && !isNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given []IssueComment and assigns it to the Comments field.
func (o *Issue) SetComments(v []*IssueComment) {
	o.Comments = v
}

func (o Issue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.IssueType) {
		toSerialize["issueType"] = o.IssueType
	}
	if !isNil(o.Media) {
		toSerialize["media"] = o.Media
	}
	if !isNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !isNil(o.ModifiedBy) {
		toSerialize["modifiedBy"] = o.ModifiedBy
	}
	if !isNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Issue) UnmarshalJSON(bytes []byte) (err error) {
	varIssue := _Issue{}

	if err = json.Unmarshal(bytes, &varIssue); err == nil {
		*o = Issue(varIssue)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "issueType")
		delete(additionalProperties, "media")
		delete(additionalProperties, "createdBy")
		delete(additionalProperties, "modifiedBy")
		delete(additionalProperties, "comments")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIssue struct {
	value *Issue
	isSet bool
}

func (v NullableIssue) Get() *Issue {
	return v.value
}

func (v *NullableIssue) Set(val *Issue) {
	v.value = val
	v.isSet = true
}

func (v NullableIssue) IsSet() bool {
	return v.isSet
}

func (v *NullableIssue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssue(val *Issue) *NullableIssue {
	return &NullableIssue{value: val, isSet: true}
}

func (v NullableIssue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


